// Generated by CoffeeScript 1.9.3
(function() {
  var Nex, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Nex = this.Nex || require('nex');

  _ = require('underscore');

  Nex.Widgets.Image = (function(superClass) {
    extend(Image, superClass);

    Image.prototype.className = 'imagoimage';

    Image.prototype.defaults = {
      align: 'center center',
      sizemode: 'fit',
      hires: true,
      scale: 1,
      lazy: true,
      maxSize: 2560,
      mediasize: false,
      width: '',
      height: '',
      responsive: true
    };

    Image.prototype.events = {
      'resize': 'render'
    };

    Image.prototype.elements = {
      '.imagox23': 'image'
    };

    function Image() {
      this.setBackgroundSize = bind(this.setBackgroundSize, this);
      this.calcMediaSize = bind(this.calcMediaSize, this);
      this.imgLoaded = bind(this.imgLoaded, this);
      this.preload = bind(this.preload, this);
      this.onResize = bind(this.onResize, this);
      this.render = bind(this.render, this);
      var key, r, ref, value;
      ref = this.defaults;
      for (key in ref) {
        value = ref[key];
        this[key] = value;
      }
      if (this.noResize) {
        this.log('@noResize depricated will be removed soon, use responsive: false');
        this.responsive = false;
      }
      Image.__super__.constructor.apply(this, arguments);
      this.logPrefix = '(App) Image: ';
      this.initialWidth = this.width;
      this.initialHeight = this.height;
      if (!this.src) {
        return this.log('Error: image widget rquires src');
      }
      if (!this.resolution) {
        return this.log('Error: image widget rquires resolution');
      }
      this.id || (this.id = Nex.Utils.uuid());
      if (this.data) {
        this.el.data(this.data);
      }
      this.html('<div class="imagox23"></div><div class="spin"></div><div class="spin2"></div>');
      if (typeof this.width === 'number') {
        this.el.width(this.width);
      }
      if (typeof this.height === 'number') {
        this.el.height(this.height);
      }
      this.el.addClass(this["class"]);
      if (this.style) {
        this.el.attr('style', this.style);
      }
      this.window = $(window);
      if (this.responsive) {
        this.window.on("resizestop." + this.id, this.preload);
      }
      this.window.on("orientationchange", (function(_this) {
        return function() {
          if (_this.responsive) {
            _this.width = _this.initialWidth;
            _this.height = _this.initalHeight;
            return _this.render();
          }
        };
      })(this));
      if (this.responsive) {
        this.window.on("resize." + this.id, _.throttle(this.onResize, 250));
      }
      if (this.lazy) {
        this.window.on("scrollstop." + this.id, this.preload);
      }
      if (typeof this.resolution === 'string') {
        r = this.resolution.split('x');
        this.resolution = {
          width: r[0],
          height: r[1]
        };
      }
      this.render();
    }

    Image.prototype.render = function() {
      if (this.released) {
        return;
      }
      if (!(this.el.width() || this.el.height())) {
        this.delay(this.render, 250);
        return;
      }
      return this.preload();
    };

    Image.prototype.resize = function(width, height) {
      if (width) {
        this.width = width;
      }
      if (height) {
        this.height = height;
      }
      return this.onResize();
    };

    Image.prototype.onResize = function() {
      return this.image.css('backgroundSize', this.calcMediaSize());
    };

    Image.prototype.preload = function(options) {
      var assetRatio, css, dpr, img, key, servingSize, value, wrapperRatio;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.onResize();
      if (this.status === 'preloading') {
        return this.log('tried to preload during preloading!!');
      }
      assetRatio = this.resolution.width / this.resolution.height;
      if (typeof this.initialWidth === 'number' && typeof this.initialHeight === 'number') {

      } else if (this.initialHeight === 'auto' && typeof this.initialWidth === 'number') {
        this.height = parseInt(this.width / assetRatio);
        this.el.height(this.height);
      } else if (this.initialWidth === 'auto' && typeof this.initialHeight === 'number') {
        this.width = parseInt(this.height * assetRatio);
        this.el.width(this.width);
      } else if (this.initialWidth === 'auto' && this.initialHeight === 'auto') {
        this.width = parseInt(this.el.css('width'));
        this.height = this.width / assetRatio;
        this.el.height(parseInt(this.height));
      } else {
        this.width = parseInt(this.el.css('width'));
        this.height = parseInt(this.el.css('height'));
      }
      if (!$.inviewport(this.el, {
        threshold: 0
      }) && this.lazy) {
        return;
      }
      this.status = 'preloading';
      if (this.lazy) {
        this.window.off("scrollstop." + this.id);
      }
      wrapperRatio = this.width / this.height;
      dpr = this.hires ? Math.ceil(window.devicePixelRatio) || 1 : 1;
      if (this.sizemode === 'crop') {
        if (assetRatio <= wrapperRatio) {
          servingSize = Math.round(Math.max(this.width, this.width / assetRatio));
        } else {
          servingSize = Math.round(Math.max(this.height, this.height * assetRatio));
        }
      } else {
        if (assetRatio <= wrapperRatio) {
          servingSize = Math.round(Math.max(this.height, this.height * assetRatio));
        } else {
          servingSize = Math.round(Math.max(this.width, this.width / assetRatio));
        }
      }
      servingSize = parseInt(Math.min(servingSize * dpr, this.maxSize));
      if (servingSize === this.servingSize) {
        this.status = 'loaded';
        return;
      }
      this.servingSize = servingSize;
      this.servingUrl = this.src + "=s" + (parseInt(this.servingSize * this.scale));
      img = $('<img>').bind('load', this.imgLoaded);
      img.attr('src', this.servingUrl);
      css = {};
      css.backgroundPosition = this.align;
      css.display = "inline-block";
      if (!this.responsive) {
        css.width = (parseInt(this.width, 10)) + "px";
        css.height = (parseInt(this.height, 10)) + "px";
      }
      this.image.css(css);
      return this.el.removeClass('loaded');
    };

    Image.prototype.imgLoaded = function() {
      this.image.css({
        backgroundImage: "url(" + this.servingUrl + ")",
        backgroundSize: this.calcMediaSize()
      });
      this.delay(function() {
        return this.el.addClass('loaded');
      }, 250);
      this.trigger('loaded');
      return this.status = 'loaded';
    };

    Image.prototype.calcMediaSize = function(options) {
      var assetRatio, key, value, wrapperRatio;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.width = this.el.width() || this.width;
      this.height = this.el.height() || this.height;
      if (!(this.width && this.height)) {
        return;
      }
      assetRatio = this.resolution.width / this.resolution.height;
      wrapperRatio = this.width / this.height;
      if (this.sizemode === 'crop') {
        if (assetRatio < wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      } else {
        if (assetRatio > wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      }
    };

    Image.prototype.setBackgroundSize = function(options) {
      var assetRatio, key, value, wrapperRatio;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.width || (this.width = this.el.width());
      this.height || (this.height = this.el.height());
      assetRatio = this.resolution.width / this.resolution.height;
      wrapperRatio = this.width / this.height;
      if (this.sizemode === 'crop') {
        if (assetRatio < wrapperRatio) {
          value = "100% auto";
        } else {
          value = "auto 100%";
        }
      } else {
        if (assetRatio > wrapperRatio) {
          value = "100% auto";
        } else {
          value = "auto 100%";
        }
      }
      return this.image.css({
        backgroundSize: value
      });
    };

    Image.prototype.activate = function() {
      Image.__super__.activate.apply(this, arguments);
      return this.preload();
    };

    Image.prototype.release = function() {
      if (this.id) {
        this.window.off(this.id);
      }
      this.released = true;
      return Image.__super__.release.apply(this, arguments);
    };

    return Image;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Image;

}).call(this);
