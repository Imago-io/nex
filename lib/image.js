// Generated by CoffeeScript 1.6.3
(function() {
  var Image,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Image = (function(_super) {
    __extends(Image, _super);

    Image.prototype.className = 'imagoimage';

    Image.prototype.defaults = {
      align: 'center center',
      sizemode: 'fit',
      hires: true,
      scale: 1
    };

    Image.prototype.events = {
      'resize': 'render'
    };

    Image.prototype.elements = {
      '.image': 'image'
    };

    function Image() {
      this.calcMediaSize = __bind(this.calcMediaSize, this);
      this.imgLoaded = __bind(this.imgLoaded, this);
      this.preload = __bind(this.preload, this);
      this.resize = __bind(this.resize, this);
      this.render = __bind(this.render, this);
      var key, r, value, w, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Image.__super__.constructor.apply(this, arguments);
      this.logPrefix = '(App) Image: ';
      this.html('<div class="image"></div><div class="spin"></div><div class="spin2"></div>');
      if (this.width) {
        this.el.width(this.width);
      }
      if (this.height) {
        this.el.height(this.height);
      }
      this.el.addClass(this["class"]);
      w = $(window);
      if (!this.width && !this.height) {
        w.on('resizestop', this.preload);
      }
      w.on('resize', this.resize);
      if (typeof this.resolution === 'string') {
        r = this.resolution.split('x');
        this.resolution = {
          width: r[0],
          height: r[1]
        };
      }
      this.render();
    }

    Image.prototype.render = function() {
      if (!this.el.width()) {
        this.delay(this.render, 250);
        return;
      }
      if (!this.src) {
        return;
      }
      return this.preload();
    };

    Image.prototype.resize = function() {
      return this.image.css('backgroundSize', this.calcMediaSize());
    };

    Image.prototype.preload = function() {
      var dpr, height, img, width;
      if (this.status === 'preloading') {
        return;
      }
      this.status = 'preloading';
      width = (this.width * this.scale) || this.el.width() || 500;
      height = (this.height * this.scale) || this.el.height() || 500;
      if (width) {
        width = Math.round(width / 50) * 50;
      }
      if (height) {
        height = Math.round(height / 50) * 50;
      }
      dpr = this.hires ? Math.ceil(window.devicePixelRatio) || 1 : 1;
      this.serving_url = this.src;
      this.serving_url += "=s" + (Math.min(Math.max(width, height) * dpr, 2000));
      img = $('<img>').bind('load', this.imgLoaded);
      return img.attr('src', this.serving_url);
    };

    Image.prototype.imgLoaded = function() {
      var css;
      this.trigger('loaded');
      this.status = 'loaded';
      if (!this.align) {
        this.align = 'center center';
      }
      css = {
        backgroundImage: "url(" + this.serving_url + ")",
        backgroundPosition: this.align,
        display: "inline-block"
      };
      css.backgroundSize = this.calcMediaSize();
      if (Number(this.width)) {
        css.width = "" + this.width + "px";
      }
      if (Number(this.height)) {
        css.height = "" + this.height + "px";
      }
      this.el.removeClass('loaded');
      this.image.css(css);
      return this.delay(this.loadedClass, 1);
    };

    Image.prototype.calcMediaSize = function() {
      var assetRatio, height, width, wrapperRatio;
      width = this.width || this.el.width();
      height = this.height || this.el.height();
      assetRatio = this.resolution.width / this.resolution.height;
      wrapperRatio = width / height;
      if (this.sizemode === 'crop') {
        if (assetRatio < wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      } else {
        if (assetRatio > wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      }
    };

    Image.prototype.loadedClass = function() {
      return this.el.addClass('loaded');
    };

    return Image;

  })(Spine.Controller);

  module.exports = Image;

}).call(this);

/*
//@ sourceMappingURL=image.map
*/
