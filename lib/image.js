// Generated by CoffeeScript 1.7.1
(function() {
  var Nex,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nex = this.Nex || require('nex');

  Nex.Widgets.Image = (function(_super) {
    __extends(Image, _super);

    Image.prototype.className = 'imagoimage';

    Image.prototype.defaults = {
      align: 'center center',
      sizemode: 'fit',
      hires: true,
      scale: 1,
      lazy: true,
      maxSize: 2560,
      noResize: false,
      mediasize: false,
      width: 'auto',
      height: 'auto'
    };

    Image.prototype.events = {
      'resize': 'render'
    };

    Image.prototype.elements = {
      '.image': 'image'
    };

    function Image() {
      this.calcMediaSize = __bind(this.calcMediaSize, this);
      this.imgLoaded = __bind(this.imgLoaded, this);
      this.preload = __bind(this.preload, this);
      this.resizeStart = __bind(this.resizeStart, this);
      this.render = __bind(this.render, this);
      var key, r, value, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Image.__super__.constructor.apply(this, arguments);
      this.logPrefix = '(App) Image: ';
      this.log('@align', this.align);
      if (!this.src) {
        return this.log('Error: image widget rquires src');
      }
      if (!this.resolution) {
        return this.log('Error: image widget rquires resolution');
      }
      this.id = Nex.Utils.uuid();
      this.html('<div class="image"></div><div class="spin"></div><div class="spin2"></div>');
      if (typeof this.width === 'number') {
        this.el.width(this.width);
      }
      if (typeof this.height === 'number') {
        this.el.height(this.height);
      }
      this.el.addClass(this["class"]);
      if (this.style) {
        this.el.attr('style', this.style);
      }
      this.window = $(window);
      if (!this.width && !this.height) {
        this.window.on("resizestop." + this.id, this.preload);
      }
      if (!this.noResize) {
        this.window.on("resizestart." + this.id, this.resizeStart);
      }
      if (this.lazy) {
        this.window.on("scrollstop." + this.id, this.preload);
      }
      if (typeof this.resolution === 'string') {
        r = this.resolution.split('x');
        this.resolution = {
          width: r[0],
          height: r[1]
        };
      }
      this.render();
    }

    Image.prototype.render = function() {
      if (this.released) {
        return;
      }
      if (!this.el.width()) {
        this.delay(this.render, 250);
        return;
      }
      return this.preload();
    };

    Image.prototype.resize = function(width, height) {
      this.width = width;
      this.height = height;
      return this.resizeStart();
    };

    Image.prototype.resizeStart = function() {
      return this.image.css('backgroundSize', this.calcMediaSize());
    };

    Image.prototype.preload = function() {
      var assetRatio, css, dpr, height, img, servingSize, width, wrapperRatio;
      if (this.lazy) {
        if (!$.inviewport(this.el, {
          threshold: 0
        })) {
          return;
        }
      }
      if (this.status === 'preloading') {
        return this.log('tried to preload during preloading!!');
      }
      this.status = 'preloading';
      if (this.lazy) {
        this.window.off("scrollstop." + this.id);
      }
      assetRatio = this.resolution.width / this.resolution.height;
      width = typeof this.width === 'number' ? this.width : this.el.width();
      if (typeof this.height === 'number') {
        height = this.height;
      } else {
        height = this.el.height();
      }
      wrapperRatio = width / height;
      this.log('width, height, wrapperRatio', width, height, wrapperRatio);
      dpr = this.hires ? Math.ceil(window.devicePixelRatio) || 1 : 1;
      if (this.sizemode === 'crop') {
        if (assetRatio <= wrapperRatio) {
          this.log('crop full width');
          servingSize = Math.round(Math.max(width, width / assetRatio));
        } else {
          this.log('crop full height');
          servingSize = Math.round(Math.max(height, height * assetRatio));
        }
      } else {
        if (assetRatio <= wrapperRatio) {
          this.log('fit full height', width, height, assetRatio, height * assetRatio);
          servingSize = Math.round(Math.max(height, height * assetRatio));
        } else {
          this.log('fit full width', width, height, assetRatio, height / assetRatio);
          servingSize = Math.round(Math.max(width, width / assetRatio));
        }
      }
      servingSize = Math.min(servingSize * dpr, this.maxSize);
      this.log('servingSize', servingSize, width, height);
      if (servingSize === this.servingSize) {
        this.status = 'loaded';
        return;
      }
      this.servingSize = servingSize;
      this.servingUrl = "" + this.src + "=s" + (this.servingSize * this.scale);
      img = $('<img>').bind('load', this.imgLoaded);
      img.attr('src', this.servingUrl);
      css = {
        backgroundPosition: this.align,
        display: "inline-block"
      };
      css.backgroundSize = this.calcMediaSize();
      if (Number(this.width)) {
        css.width = "" + (parseInt(this.width, 10)) + "px";
      }
      if (Number(this.height)) {
        css.height = "" + (parseInt(this.height, 10)) + "px";
      }
      return this.image.css(css);
    };

    Image.prototype.imgLoaded = function() {
      var css;
      this.trigger('loaded');
      this.status = 'loaded';
      css = {
        backgroundImage: "url(" + this.servingUrl + ")"
      };
      this.el.removeClass('loaded');
      this.image.css(css);
      return this.delay(this.loadedClass, 1);
    };

    Image.prototype.calcMediaSize = function() {
      var assetRatio, height, width, wrapperRatio;
      width = +this.width || this.el.width();
      height = +this.height || this.el.height();
      assetRatio = this.resolution.width / this.resolution.height;
      wrapperRatio = width / height;
      if (this.sizemode === 'crop') {
        if (assetRatio < wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      } else {
        if (assetRatio > wrapperRatio) {
          return "100% auto";
        } else {
          return "auto 100%";
        }
      }
    };

    Image.prototype.loadedClass = function() {
      return this.el.addClass('loaded');
    };

    Image.prototype.activate = function() {
      Image.__super__.activate.apply(this, arguments);
      return this.preload();
    };

    Image.prototype.release = function() {
      this.window.off(this.id);
      this.released = true;
      return Image.__super__.release.apply(this, arguments);
    };

    return Image;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Image;

}).call(this);

//# sourceMappingURL=image.map
