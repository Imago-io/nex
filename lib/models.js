// Generated by CoffeeScript 1.6.3
(function() {
  var Asset, CartItem, Collection, Generic, Image, Proxy, Search, Setting, Video, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Search = require("./search");

  Asset = (function(_super) {
    __extends(Asset, _super);

    function Asset() {
      _ref = Asset.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Asset.configure('Asset');

    Asset.extend(Search);

    Asset.id_to_kind = function(id) {
      var kind;
      if (id.indexOf('Collection-') === 0) {
        kind = 'Collection';
      } else if (id.indexOf('Generic-') === 0) {
        kind = 'Generic';
      } else if (id.indexOf('Proxy-') === 0) {
        kind = 'Proxy';
      } else if (id.indexOf('Order-') === 0) {
        kind = 'Order';
      } else if (id.match(/[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/)) {
        kind = 'Image';
      } else if (id.match(/[0-9a-z]{56}/)) {
        kind = 'Video';
      }
      return kind;
    };

    Asset.globalFind = function(id) {
      return this.get_model(id).find(id);
    };

    Asset.globalExists = function(id) {
      return this.get_model(id).exists(id);
    };

    Asset.get_model = function(id_or_kind) {
      return Nex.Models[id_or_kind] || Nex.Models[this.id_to_kind(id_or_kind)];
    };

    Asset.create_or_update = function(attrs, options) {
      var model;
      model = this.get_model(attrs.id);
      if (!model.exists(attrs.id)) {
        return model.create(attrs, options);
      }
      return model.update(attrs.id, attrs, options);
    };

    Asset.prototype.getMeta = function(field, fallback) {
      var _ref1, _ref2, _ref3, _ref4;
      if (fallback == null) {
        fallback = '';
      }
      if (!field) {
        return fallback;
      }
      if ((_ref1 = this.meta[field]) != null ? (_ref2 = _ref1.value) != null ? _ref2.hasOwnProperty('value') : void 0 : void 0) {
        return ((_ref3 = this.meta[field].value) != null ? _ref3.value : void 0) || fallback;
      }
      return ((_ref4 = this.meta[field]) != null ? _ref4.value : void 0) || fallback;
    };

    Asset.prototype.options = function() {
      var key, obj, opts, variant, _i, _len, _ref1, _ref2, _ref3;
      opts = {};
      _ref1 = this.variants;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        variant = _ref1[_i];
        _ref2 = variant.meta;
        for (key in _ref2) {
          obj = _ref2[key];
          key = Nex.Utils.pluralize(key);
          opts[key] || (opts[key] = []);
          if (_ref3 = obj.value, __indexOf.call(opts[key], _ref3) < 0) {
            opts[key].push(obj.value);
          }
        }
      }
      return opts;
    };

    return Asset;

  })(Spine.Model);

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      _ref1 = Collection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Collection.configure('Collection', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'sort_by', 'sort_order', 'assets', 'hidden', 'normname', 'canonical');

    return Collection;

  })(Asset);

  Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      _ref2 = Image.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Image.configure('Image', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical');

    return Image;

  })(Asset);

  Video = (function(_super) {
    __extends(Video, _super);

    function Video() {
      _ref3 = Video.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Video.configure('Video', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical', 'formats');

    return Video;

  })(Asset);

  Generic = (function(_super) {
    __extends(Generic, _super);

    function Generic() {
      _ref4 = Generic.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Generic.configure('Generic', 'kind', 'name', 'meta', 'serving_url', 'path', 'date_created', 'date_modified', 'resolution', 'normname', 'canonical', 'variants');

    return Generic;

  })(Asset);

  Proxy = (function(_super) {
    __extends(Proxy, _super);

    function Proxy() {
      _ref5 = Proxy.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Proxy.configure('Proxy', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'proxypath', 'thumb');

    return Proxy;

  })(Asset);

  Setting = (function(_super) {
    __extends(Setting, _super);

    function Setting() {
      _ref6 = Setting.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Setting.configure('Setting', 'label', 'name', 'value', 'section', 'order', 'type', 'visible', 'width', 'options');

    Setting.findAllBySection = function(section) {
      var settings;
      settings = this.findAllByAttribute('section', section);
      settings.sort(function(a, b) {
        return a.order - b.order;
      });
      return settings;
    };

    Setting.extend(Spine.Model.Ajax);

    return Setting;

  })(Spine.Model);

  CartItem = (function(_super) {
    __extends(CartItem, _super);

    function CartItem() {
      _ref7 = CartItem.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    CartItem.configure('CartItem', 'meta', 'serving_url', 'quantity', 'price', 'color', 'size', 'itemid');

    CartItem.addToCart = function(itemid, quantity, options) {
      var existing, item;
      if (options == null) {
        options = {
          'size': '',
          'color': ''
        };
      }
      existing = this.select(function(item) {
        return item.itemid === itemid;
      });
      if (existing.length) {
        item = existing[0];
        item.quantity = item.quantity + quantity;
        item.save();
        return;
      }
      item = {
        itemid: itemid,
        quantity: quantity,
        color: options != null ? options.color : void 0,
        size: options != null ? options.size : void 0,
        serving_url: options != null ? options.serving_url : void 0,
        price: options != null ? options.price : void 0
      };
      return this.create(item);
    };

    CartItem.extend(Spine.Model.Ajax);

    return CartItem;

  })(Spine.Model);

  Spine.Ajax.defaults.headers['NexClient'] = Nex.client;

  Nex.Models = {
    Collection: Collection,
    Asset: Asset,
    Image: Image,
    Video: Video,
    Proxy: Proxy,
    Setting: Setting,
    Generic: Generic,
    CartItem: CartItem
  };

  module.exports = Nex.Models;

}).call(this);

/*
//@ sourceMappingURL=models.map
*/
