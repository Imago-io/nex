// Generated by CoffeeScript 1.6.3
(function() {
  var Asset, Collection, Generic, Image, Proxy, Search, Setting, Video, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Search = {
    get: function(params) {
      var deferred, getAssetsDone, getAssetsFail, getCollectionDone, getCollectionFail, getSearchDone, getSearchFail, promise, result,
        _this = this;
      params = this._objListToDict(params);
      deferred = $.Deferred();
      promise = deferred.promise();
      result = {
        items: [],
        count: 0
      };
      getAssetsDone = function(assets) {
        if (assets.length && result.kind === 'Collection') {
          result.items = _this.sortassets(result.assets, assets);
          result.count = assets.length;
        }
        return deferred.resolve(result);
      };
      getAssetsFail = function() {
        return deferred.reject();
      };
      getCollectionDone = function(collection) {
        if (!collection) {
          return deferred.resolve(result);
        }
        result = collection;
        return _this.getAssets(collection, params).done(getAssetsDone).fail(getAssetsFail);
      };
      getCollectionFail = function() {
        return deferred.reject();
      };
      getSearchDone = function(data, status, xhr) {
        var assets;
        assets = _this.parseData(data);
        result.items = assets;
        result.count = assets.length;
        return deferred.resolve(result);
      };
      getSearchFail = function(xhr, statusText, error) {
        return deferred.reject(arguments);
      };
      if (params.path) {
        this.getCollection(params).done(getCollectionDone).fail(getCollectionFail);
      } else {
        this.getSearch(params).done(getSearchDone).fail(getSearchFail);
      }
      return promise;
    },
    getSearch: function(params) {
      this.jqXHR = $.ajax({
        contentType: 'application/json',
        dataType: 'json',
        processData: false,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'NexClient': 'public'
        },
        type: 'POST',
        data: JSON.stringify(params),
        url: Spine.debug ? "http://" + Spine.settings.tenant + ".imagoapp.com/api/v2/search" : "/api/v2/search"
      });
      return this.jqXHR;
    },
    getCollection: function(params) {
      var Collection, collection, deferred, path, promise,
        _this = this;
      deferred = $.Deferred();
      promise = deferred.promise();
      path = params.path[0];
      Collection = this.get_model('Collection');
      collection = Collection.findByAttribute('path', path);
      if (collection) {
        return deferred.resolve(collection);
      } else {
        this.getSearch(params).done(function(data, status, xhr) {
          collection = _this.parseData(data)[0];
          return deferred.resolve(collection);
        });
      }
      return promise;
    },
    getAssets: function(collection, params) {
      var a, assets, deferred, id, promise, toFetch,
        _this = this;
      deferred = $.Deferred();
      promise = deferred.promise();
      delete params.path;
      if (collection.kind === 'Collection') {
        toFetch = collection.assets;
        assets = [];
        if (!Object.keys(params).length) {
          toFetch = (function() {
            var _i, _len, _ref, _results;
            _ref = collection.assets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (!this.globalExists(id)) {
                _results.push(id);
              }
            }
            return _results;
          }).call(this);
          assets = (function() {
            var _i, _len, _ref, _results;
            _ref = collection.assets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (this.globalExists(id)) {
                _results.push(this.globalFind(id));
              }
            }
            return _results;
          }).call(this);
          if (!toFetch.length) {
            assets = (function() {
              var _i, _len, _ref, _results;
              _results = [];
              for (_i = 0, _len = assets.length; _i < _len; _i++) {
                a = assets[_i];
                if (_ref = a.id, __indexOf.call(collection.hidden, _ref) < 0) {
                  _results.push(a);
                }
              }
              return _results;
            })();
          }
        }
        if (!toFetch.length) {
          return deferred.resolve(assets);
        }
        params.ids = toFetch;
        params.ancestor = collection.id;
        this.getSearch(params).done(function(data, status, xhr) {
          assets = assets.concat(_this.parseData(data));
          return deferred.resolve(assets);
        });
      } else {
        deferred.resolve([]);
      }
      return promise;
    },
    sortassets: function(ids, assets) {
      var asset, i, id, orderedlist, _i, _j, _len, _len1;
      orderedlist = [];
      for (_i = 0, _len = ids.length; _i < _len; _i++) {
        id = ids[_i];
        for (i = _j = 0, _len1 = assets.length; _j < _len1; i = ++_j) {
          asset = assets[i];
          if (asset.id === id) {
            orderedlist.push(asset);
            break;
          }
        }
      }
      return orderedlist;
    },
    parseData: function(data) {
      var asset, obj, objs, _i, _len;
      objs = [];
      if (typeof data === 'string') {
        data = JSON.parse(data);
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        obj = data[_i];
        asset = this.create_or_update(obj, {
          ajax: false
        });
        objs.push(asset);
      }
      return objs;
    },
    objListToDict: function(list) {
      var obj;
      obj = {};
      _.map(list, function(item) {
        var key, value, _results;
        _results = [];
        for (key in item) {
          value = item[key];
          if (obj[key]) {
            _results.push(obj[key].push(value));
          } else {
            _results.push(obj[key] = [value]);
          }
        }
        return _results;
      });
      if (obj.collection != null) {
        obj['path'] = obj.collection;
        delete obj.collection;
      }
      return obj;
    },
    _objListToDict: function(obj_or_list) {
      var elem, key, querydict, value, _i, _len;
      querydict = {};
      if (Spine.isArray(obj_or_list)) {
        for (_i = 0, _len = obj_or_list.length; _i < _len; _i++) {
          elem = obj_or_list[_i];
          for (key in elem) {
            value = elem[key];
            if (querydict[key]) {
              querydict[key].push(value);
            } else {
              querydict[key] = [value];
            }
          }
        }
      } else {
        for (key in obj_or_list) {
          value = obj_or_list[key];
          if (!Spine.isArray(value)) {
            querydict[key] = [value];
          } else {
            querydict[key] = value;
          }
        }
      }
      if (querydict.collection != null) {
        querydict['path'] = querydict.collection;
        delete querydict.collection;
      }
      return querydict;
    }
  };

  Asset = (function(_super) {
    __extends(Asset, _super);

    function Asset() {
      _ref = Asset.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Asset.configure('Asset');

    Asset.extend(Search);

    Asset.id_to_kind = function(id) {
      var kind;
      if (id.indexOf('Collection-') === 0) {
        kind = 'Collection';
      } else if (id.indexOf('Generic-') === 0) {
        kind = 'Generic';
      } else if (id.indexOf('Proxy-') === 0) {
        kind = 'Proxy';
      } else if (id.indexOf('Order-') === 0) {
        kind = 'Order';
      } else if (id.match(/[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/)) {
        kind = 'Image';
      } else if (id.match(/[0-9a-z]{56}/)) {
        kind = 'Video';
      }
      return kind;
    };

    Asset.globalFind = function(id) {
      return this.get_model(id).find(id);
    };

    Asset.globalExists = function(id) {
      return this.get_model(id).exists(id);
    };

    Asset.get_model = function(id_or_kind) {
      return Nex.Models[id_or_kind] || Nex.Models[this.id_to_kind(id_or_kind)];
    };

    Asset.create_or_update = function(attrs, options) {
      var model;
      model = this.get_model(attrs.id);
      if (!model.exists(attrs.id)) {
        return model.create(attrs, options);
      }
      return model.update(attrs.id, attrs, options);
    };

    Asset.prototype.getMeta = function(field, fallback) {
      var _ref1;
      if (fallback == null) {
        fallback = '';
      }
      if (!field) {
        return fallback;
      }
      return ((_ref1 = this.meta[field]) != null ? _ref1.value : void 0) || fallback;
    };

    return Asset;

  })(Spine.Model);

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      _ref1 = Collection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Collection.configure('Collection', 'kind', 'name', 'meta', 'path', 'serving_url', 'date_created', 'date_modified', 'resolution', 'sort_by', 'sort_order', 'assets', 'hidden', 'normname', 'canonical');

    return Collection;

  })(Asset);

  Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      _ref2 = Image.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Image.configure('Image', 'kind', 'name', 'meta', 'path', 'serving_url', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical');

    return Image;

  })(Asset);

  Video = (function(_super) {
    __extends(Video, _super);

    function Video() {
      _ref3 = Video.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Video.configure('Video', 'kind', 'name', 'meta', 'path', 'serving_url', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical', 'formats');

    return Video;

  })(Asset);

  Generic = (function(_super) {
    __extends(Generic, _super);

    function Generic() {
      _ref4 = Generic.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Generic.configure('Generic', 'kind', 'name', 'meta', 'serving_url', 'path', 'date_created', 'date_modified', 'normname', 'canonical');

    return Generic;

  })(Asset);

  Proxy = (function(_super) {
    __extends(Proxy, _super);

    function Proxy() {
      _ref5 = Proxy.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Proxy.configure('Proxy', 'kind', 'name', 'meta', 'path', 'serving_url', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'proxypath', 'thumb');

    return Proxy;

  })(Asset);

  Setting = (function(_super) {
    __extends(Setting, _super);

    function Setting() {
      _ref6 = Setting.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Setting.configure('Setting', 'label', 'name', 'value', 'section', 'order', 'type', 'visible', 'width', 'options');

    Setting.findAllBySection = function(section) {
      var settings;
      settings = this.findAllByAttribute('section', section);
      settings.sort(function(a, b) {
        return a.order - b.order;
      });
      return settings;
    };

    Setting.extend(Spine.Model.Ajax);

    return Setting;

  })(Spine.Model);

  Nex.Models = {
    Collection: Collection,
    Asset: Asset,
    Image: Image,
    Video: Video,
    Proxy: Proxy,
    Setting: Setting,
    Generic: Generic
  };

  module.exports = Nex.Models;

}).call(this);

/*
//@ sourceMappingURL=models.map
*/
