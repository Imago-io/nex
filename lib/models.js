// Generated by CoffeeScript 1.7.1
(function() {
  var Asset, CartItem, Collection, Generic, Image, Member, Proxy, Search, Setting, Video,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Search = require("./search");

  Asset = (function(_super) {
    __extends(Asset, _super);

    function Asset() {
      return Asset.__super__.constructor.apply(this, arguments);
    }

    Asset.configure('Asset');

    Asset.include(Log);

    Asset.extend(Search);

    Asset.id_to_kind = function(id) {
      var kind;
      if (id.indexOf('Collection-') === 0) {
        kind = 'Collection';
      } else if (id.indexOf('Generic-') === 0) {
        kind = 'Generic';
      } else if (id.indexOf('Proxy-') === 0) {
        kind = 'Proxy';
      } else if (id.indexOf('Order-') === 0) {
        kind = 'Order';
      } else if (id.match(/[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/)) {
        kind = 'Image';
      } else if (id.match(/[0-9a-z]{56}/)) {
        kind = 'Video';
      }
      return kind;
    };

    Asset.globalFind = function(id) {
      return this.get_model(id).find(id);
    };

    Asset.globalExists = function(id) {
      return this.get_model(id).exists(id);
    };

    Asset.get_model = function(id_or_kind) {
      return Nex.Models[id_or_kind] || Nex.Models[this.id_to_kind(id_or_kind)];
    };

    Asset.models = function() {
      var models;
      models = {
        Collection: Nex.Models.Collection,
        Image: Nex.Models.Image,
        Video: Nex.Models.Video,
        Proxy: Nex.Models.Proxy,
        Generic: Nex.Models.Generic
      };
      return models;
    };

    Asset.filter = function(callback, exclude) {
      var modelName, models, results;
      if (exclude == null) {
        exclude = [];
      }
      models = this.models();
      exclude = Spine.isArray(exclude) ? exclude : [exclude];
      results = [];
      for (modelName in models) {
        if (__indexOf.call(exclude, modelName) >= 0) {
          continue;
        }
        results = results.concat(models[modelName].select(callback));
      }
      return results;
    };

    Asset.create_or_update = function(attrs, options) {
      var model;
      model = this.get_model(attrs.id);
      if (!model.exists(attrs.id)) {
        return model.create(attrs, options);
      }
      return model.update(attrs.id, attrs, options);
    };

    Asset.related = function(params) {
      params.context = params.context.id ? params.context.id : params.context;
      params.limit || (params.limit = 10);
      params.related = typeof context.getMeta === "function" ? context.getMeta(params.propname, []) : void 0;
      return this.get(params);
    };

    Asset.prototype._normalizeValue = function(value) {
      if (!value) {
        return '';
      }
      if (value.hasOwnProperty('value')) {
        value = value.value;
      }
      if (Spine.isArray(value)) {
        value = value.join(' ').toLowerCase();
      }
      if (typeof value === "string") {
        value = value.toLowerCase();
      }
      return value;
    };

    Asset.prototype.query = function(params, searchkey) {
      var attributes, key, q, value, _i, _j, _len, _len1;
      if (searchkey == null) {
        searchkey = void 0;
      }
      attributes = (function() {
        var _results;
        _results = [];
        for (key in this.meta) {
          _results.push(key);
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        key = attributes[_i];
        if (searchkey && (searchkey !== key)) {
          continue;
        }
        value = this._normalizeValue(this.meta[key].value);
        for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
          q = params[_j];
          if (value.indexOf(q) !== -1) {
            return true;
          }
        }
      }
      return false;
    };

    Asset.prototype.related = function(params) {
      params.context = this;
      return Asset.related(params);
    };

    Asset.prototype.getMeta = function(field, fallback) {
      var original_value, value, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (fallback == null) {
        fallback = '';
      }
      if (!field) {
        return fallback;
      }
      if ((_ref = this.meta[field]) != null ? (_ref1 = _ref.value) != null ? _ref1.hasOwnProperty('value') : void 0 : void 0) {
        value = (_ref2 = this.meta[field]) != null ? _ref2.value.value : void 0;
      } else {
        value = (_ref3 = this.meta[field]) != null ? _ref3.value : void 0;
      }
      if ((_ref4 = this.meta[field]) != null ? (_ref5 = _ref4.original_value) != null ? _ref5.hasOwnProperty('value') : void 0 : void 0) {
        original_value = (_ref6 = this.meta[field]) != null ? _ref6.original_value.value : void 0;
      } else {
        original_value = (_ref7 = this.meta[field]) != null ? _ref7.original_value : void 0;
      }
      return value || original_value || fallback;
    };

    Asset.prototype.options = function() {
      var key, obj, opts, variant, _i, _len, _ref, _ref1, _ref2;
      opts = {};
      _ref = this.variants;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        variant = _ref[_i];
        _ref1 = variant.meta;
        for (key in _ref1) {
          obj = _ref1[key];
          key = Nex.Utils.pluralize(key);
          opts[key] || (opts[key] = []);
          if (obj.value && (_ref2 = obj.value, __indexOf.call(opts[key], _ref2) < 0)) {
            opts[key].push(obj.value);
          }
        }
      }
      return opts;
    };

    Asset.prototype.filterOptions = function(keyname, value) {
      var key, obj, opts, variant, variants, _i, _len, _ref, _ref1;
      variants = this.variants.filter(function(item) {
        var _ref;
        return ((_ref = item.meta[Nex.Utils.singularize(keyname)]) != null ? _ref.value : void 0) === value;
      });
      opts = {
        mapping: {}
      };
      for (_i = 0, _len = variants.length; _i < _len; _i++) {
        variant = variants[_i];
        _ref = variant.meta;
        for (key in _ref) {
          obj = _ref[key];
          key = Nex.Utils.pluralize(key);
          opts[key] || (opts[key] = []);
          if (_ref1 = obj.value, __indexOf.call(opts[key], _ref1) < 0) {
            opts[key].push(obj.value);
          }
          opts.mapping[obj.value] = variant.meta.stock.value;
        }
      }
      return opts;
    };

    Asset.prototype.discounted = function() {
      if (!this.variants.length) {
        return false;
      }
      return this.variants[0].meta.discounted && ((this.variants[0].meta.discounted.value > 0) || (this.variants[0].meta.discounted.value[Nex.currency] > 0));
    };

    Asset.prototype.totalStock = function() {
      var v;
      if (!this.variants.length) {
        return 100;
      }
      return ((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.variants;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push((_ref1 = v.meta.stock) != null ? _ref1.value : void 0);
        }
        return _results;
      }).call(this)).reduce(function(t, s) {
        return t + s;
      });
    };

    Asset.prototype.price = function(currency, discounted, decimals) {
      var priceValue, _ref, _ref1;
      if (discounted == null) {
        discounted = false;
      }
      if (decimals == null) {
        decimals = true;
      }
      currency || (currency = Nex.currency);
      priceValue = ((_ref = this.variants[0]) != null ? _ref.meta.price.value[currency] : void 0) || this.getMeta('price', {
        currency: 0
      })[currency];
      if (discounted) {
        priceValue = ((_ref1 = this.variants[0]) != null ? _ref1.meta.discounted.value[currency] : void 0) || this.getMeta('discounted', {
          currency: 0
        })[currency];
      }
      return Nex.Utils.toPrice(priceValue, currency, decimals);
    };

    Asset.prototype.upvote = function() {
      var host, successResponse, _base;
      (_base = this.meta).likes || (_base.likes = {
        value: 0
      });
      this.meta.likes.value++;
      this.meta.likes.liked = true;
      this.save();
      successResponse = (function(_this) {
        return function(data, status, xhr, options) {};
      })(this);
      host = Nex.data === 'online' && Nex.debug ? "http://" + Nex.tenant + ".imagoapp.com" : "";
      return $.ajax({
        contentType: 'application/json',
        dataType: 'json',
        processData: false,
        data: JSON.stringify({
          'likes': {
            'value': this.meta.likes.value
          }
        }),
        type: 'PUT',
        url: host + '/api/v2/metaupdate/' + this.id
      }).success(successResponse).error((function(_this) {
        return function() {
          return _this.log('error while upvoting');
        };
      })(this));
    };

    return Asset;

  })(Spine.Model);

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.configure('Collection', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'sort_by', 'sort_order', 'assets', 'hidden', 'normname', 'canonical');

    return Collection;

  })(Asset);

  Image = (function(_super) {
    __extends(Image, _super);

    function Image() {
      return Image.__super__.constructor.apply(this, arguments);
    }

    Image.configure('Image', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical');

    return Image;

  })(Asset);

  Video = (function(_super) {
    __extends(Video, _super);

    function Video() {
      return Video.__super__.constructor.apply(this, arguments);
    }

    Video.configure('Video', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'canonical', 'formats');

    return Video;

  })(Asset);

  Generic = (function(_super) {
    __extends(Generic, _super);

    function Generic() {
      return Generic.__super__.constructor.apply(this, arguments);
    }

    Generic.configure('Generic', 'kind', 'name', 'meta', 'serving_url', 'path', 'date_created', 'date_modified', 'resolution', 'normname', 'canonical', 'variants');

    return Generic;

  })(Asset);

  Proxy = (function(_super) {
    __extends(Proxy, _super);

    function Proxy() {
      return Proxy.__super__.constructor.apply(this, arguments);
    }

    Proxy.configure('Proxy', 'kind', 'name', 'meta', 'path', 'serving_url', 'variants', 'date_created', 'date_modified', 'resolution', 'filesize', 'normname', 'proxypath', 'thumb');

    return Proxy;

  })(Asset);

  Setting = (function(_super) {
    __extends(Setting, _super);

    function Setting() {
      return Setting.__super__.constructor.apply(this, arguments);
    }

    Setting.configure('Setting', 'label', 'name', 'value', 'section', 'order', 'type', 'visible', 'width', 'options');

    Setting.findAllBySection = function(section) {
      var settings;
      settings = this.findAllByAttribute('section', section);
      settings.sort(function(a, b) {
        return a.order - b.order;
      });
      return settings;
    };

    Setting.findByName = function(name) {
      return this.findByAttribute('name', name);
    };

    Setting.currency = function() {
      var currencies, sessioncur;
      sessioncur = Nex.Utils.getCurrencyByCode(Nex.country);
      currencies = this.findByName('currencies').value;
      if (__indexOf.call(currencies, sessioncur) >= 0) {
        return sessioncur;
      } else {
        return currencies[0];
      }
    };

    Setting.setSessionData = function() {
      Nex.currencies = this.findByName('currencies').value;
      Nex.ipaddress = this.findByName('ipaddress').value;
      Nex.country = this.findByName('country').value;
      Nex.city = this.findByName('city').value;
      Nex.region = this.findByName('region').value;
      Nex.currency = this.currency();
      return $.ajax({
        type: 'GET',
        url: 'http://freegeoip.net/json/' + Nex.ipaddress
      }).success((function(_this) {
        return function(data) {
          Nex.country = data.country_code;
          Nex.city = data.city;
          Nex.region = data.region_code;
          return Nex.currency = _this.currency();
        };
      })(this)).error((function(_this) {
        return function() {
          return _this.log('fetch error for geoip');
        };
      })(this));
    };

    Setting.extend(Spine.Model.Ajax);

    return Setting;

  })(Spine.Model);

  Member = (function(_super) {
    __extends(Member, _super);

    function Member() {
      return Member.__super__.constructor.apply(this, arguments);
    }

    Member.configure('Member', 'email', 'first_name', 'last_name');

    Member.getMember = function() {
      var deferred, promise, successResponse;
      deferred = $.Deferred();
      promise = deferred.promise();
      successResponse = (function(_this) {
        return function(data, status, xhr, options) {
          var member;
          member = data.email ? _this.create(data) : void 0;
          return deferred.resolve(member);
        };
      })(this);
      $.ajax({
        contentType: 'application/json',
        dataType: 'json',
        processData: false,
        headers: Spine.Ajax.defaults,
        type: 'GET',
        url: '/api/v2/member'
      }).success(successResponse).error(function() {
        return deferred.resolve();
      });
      return promise;
    };

    Member.login = function() {
      return this._axaxCall('POST', {
        action: 'loginurl'
      });
    };

    Member.logout = function() {
      return this._axaxCall('POST', {
        action: 'logouturl'
      });
    };

    Member.checkout = function() {
      return this._axaxCall('POST', {
        action: 'checkout'
      });
    };

    Member._axaxCall = function(type, data) {
      var deferred, promise;
      deferred = $.Deferred();
      promise = deferred.promise();
      $.ajax({
        contentType: 'application/json',
        dataType: 'json',
        processData: false,
        headers: Spine.Ajax.defaults,
        type: type,
        data: JSON.stringify(data),
        url: '/api/v2/member'
      }).success(function(data, status, xhr, options) {
        if (data.url) {
          return window.location = data.url;
        } else {
          return deferred.resolve(data);
        }
      }).error((function(_this) {
        return function() {
          return _this.log('error');
        };
      })(this));
      return promise;
    };

    return Member;

  })(Spine.Model);

  CartItem = (function(_super) {
    __extends(CartItem, _super);

    function CartItem() {
      return CartItem.__super__.constructor.apply(this, arguments);
    }

    CartItem.configure('CartItem', 'meta', 'serving_url', 'quantity', 'price', 'color', 'size', 'itemid', 'headline', 'description');

    CartItem.addToCart = function(itemid, quantity, options) {
      var existing, item;
      if (options == null) {
        options = {
          'size': '',
          'color': '',
          headline: '',
          description: ''
        };
      }
      existing = this.select(function(item) {
        return item.itemid === itemid;
      });
      if (existing.length) {
        item = existing[0];
        item.quantity = item.quantity + quantity;
        item.save();
        return;
      }
      item = {
        itemid: itemid,
        quantity: quantity,
        color: options != null ? options.color : void 0,
        size: options != null ? options.size : void 0,
        serving_url: options != null ? options.serving_url : void 0,
        price: options != null ? options.price : void 0,
        headline: options != null ? options.headline : void 0,
        description: options != null ? options.description : void 0
      };
      return this.create(item);
    };

    CartItem.extend(Spine.Model.Ajax);

    return CartItem;

  })(Spine.Model);

  Spine.Ajax.defaults.headers['NexClient'] = Nex.client;

  Nex.Models = {
    Collection: Collection,
    Asset: Asset,
    Image: Image,
    Video: Video,
    Proxy: Proxy,
    Setting: Setting,
    Generic: Generic,
    Member: Member,
    CartItem: CartItem
  };

  module.exports = Nex.Models;

}).call(this);
