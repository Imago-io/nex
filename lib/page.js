// Generated by CoffeeScript 1.9.1
(function() {
  var Nex,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Nex = this.Nex || require('nex');

  Nex.Utils || (Nex.Utils = require('./utils'));

  Nex.Page = (function(superClass) {
    extend(Page, superClass);

    Page.include(Nex.Panel);

    Page.prototype.className = 'page';

    Page.prototype.logPrefix = "(App) Page: ";

    function Page() {
      this.onKeyup = bind(this.onKeyup, this);
      Page.__super__.constructor.apply(this, arguments);
      if (this["class"]) {
        this.el.addClass(this["class"]);
      }
      this.controllers = [];
      this.bind('ready', this.render);
      this.active(this.cleanUp);
    }

    Page.prototype.tmpl404 = function() {
      return "<h1 class='" + Nex.language + "'>Page not Found</h1>";
    };

    Page.prototype.render = function(result) {
      this.delay(function() {
        return window.scrollTo(0, 0);
      }, 100);
      if (!result.length) {
        return this.html(this.tmpl404());
      }
    };

    Page.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.append(controller);
    };

    Page.prototype.replaceWithWidget = function(wrapper, controller) {
      this.controllers.push(controller);
      return wrapper.replaceWith(controller.el || controller);
    };

    Page.prototype.appendWidget = function(asset) {
      var el;
      if (!(asset && (el = this.$("." + asset.normname)))) {
        return;
      }
      return this.controllers.push(new Nex.Widgets[asset.kind === 'Collection' ? 'Slider' : asset.kind]({
        el: el,
        src: asset.serving_url,
        align: asset.getMeta('crop', 'center center'),
        resolution: asset.resolution,
        uuid: asset.id,
        formats: asset.formats,
        path: asset.path,
        lazy: false,
        animation: asset.getMeta('animation', 'scalerotate'),
        sizemode: asset.getMeta('sizemode', ['crop'])[0]
      }));
    };

    Page.prototype.activate = function() {
      $('body').on('keyup.page', this.onKeyup);
      $('body').addClass(this.className);
      return Page.__super__.activate.apply(this, arguments);
    };

    Page.prototype.deactivate = function() {
      $('body').off('.page');
      $('body').removeClass(this.className);
      this.clear();
      return Page.__super__.deactivate.apply(this, arguments);
    };

    Page.prototype.clear = function() {
      var cont, i, len, ref;
      ref = this.controllers;
      for (i = 0, len = ref.length; i < len; i++) {
        cont = ref[i];
        cont.release();
      }
      return this.controllers = [];
    };

    Page.prototype.cleanUp = function(data, opts) {
      this.clear();
      return this.getData(data, opts);
    };

    Page.prototype.onKeyup = function(e) {
      var key;
      if (!this.isActive()) {
        return;
      }
      key = Nex.Utils.getKeyName(e);
      if (typeof this[key] === 'function') {
        return this[key]();
      }
    };

    return Page;

  })(Spine.Controller);

  module.exports = Nex.Page;

}).call(this);
