// Generated by CoffeeScript 1.7.1
(function() {
  var Nex, _;

  Nex = this.Nex || require('nex');

  _ = require('underscore');

  Nex.Panel = {
    getData: function(query, options) {
      var abortable, ajax, fetchassets, q, _i, _len, _ref;
      if (options == null) {
        options = {};
      }
      if (!query) {
        return this.log("Panel: query is empty, aborting " + query);
      }
      this.query = query;
      if (Nex.Utils.toType(query) === 'string') {
        this.query = [
          {
            path: this.query
          }
        ];
      }
      this.query = this.toArray(this.query);
      this.promises = [];
      this.data = [];
      if (this.query.length > 1 || !options.abortable) {
        abortable = false;
      }
      fetchassets = options.fetchAsses === void 0 ? true : options.fetchAsses;
      ajax = options.ajax === void 0 ? true : options.ajax;
      _ref = this.query;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        q = _ref[_i];
        this.promises.push(Nex.Models.Asset.get(q, abortable, fetchassets, ajax).done((function(_this) {
          return function() {
            var _ref1;
            return (_ref1 = _this.data).push.apply(_ref1, arguments);
          };
        })(this)).fail((function(_this) {
          return function() {
            return _this.log("Panel: Could not get data for panel " + _this.query);
          };
        })(this)));
      }
      return $.when.apply($, this.promises).done((function(_this) {
        return function() {
          return _this.trigger('ready', _this.data);
        };
      })(this));
    },
    getRelated: function(query, options) {
      var q, _i, _len, _ref;
      if (options == null) {
        options = {};
      }
      "query =\n  context : '/foo/bar'   # required -  path/uuid/asset\n  field   : 'category'   # required -  field the related should be filtered of\n  related : ['t1', 't2'] # optional -  values it should look for.\n                         # if not passed to the query the asset field values are taken\n  kind    : 'Image'      # optional - limit the request to specific kinds\n  limit   : 5            # optional - default is 10\n";
      if (!query) {
        return this.log("Panel: getRelated query is empty, aborting " + query);
      }
      this.relpromises = [];
      this.related = [];
      this.relquery = this.toArray(query);
      _ref = this.relquery;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        q = _ref[_i];
        this.relpromises.push(Nex.Models.Asset.get(q, this.relquery.length > 1 || !options.abortable ? false : void 0).done((function(_this) {
          return function() {
            var _ref1;
            return (_ref1 = _this.related).push.apply(_ref1, arguments);
          };
        })(this)).fail((function(_this) {
          return function() {
            return _this.log("Panel: Could not get related for panel " + _this.query);
          };
        })(this)));
      }
      return $.when.apply($, this.relpromises).done((function(_this) {
        return function() {
          return _this.trigger('ready', _this.related);
        };
      })(this));
    },
    toArray: function(elem) {
      var type;
      type = Nex.Utils.toType(elem);
      if (type !== 'object' && type !== 'string' && type !== 'array') {
        return this.log('Panel: no valid query');
      }
      if (Nex.Utils.toType(elem) === 'array') {
        return elem;
      } else {
        return [elem];
      }
    },
    setTitle: function(result) {
      var title;
      title = Nex.Models.Setting.findByAttribute('name', 'title');
      return $('title').text("" + (result.headline || 'Imago') + " - " + title.value);
    }
  };

  module.exports = Nex.Panel;

}).call(this);
