// Generated by CoffeeScript 1.7.1
(function() {
  var Nex, _,
    __slice = [].slice;

  Nex = this.Nex || require('nex');

  _ = require('underscore');

  Nex.Panel = {
    getData: function(query) {
      var q, _i, _len, _ref;
      if (!query) {
        return this.log("Panel: query is empty, aborting " + query);
      }
      if (Nex.Utils.toType(query) === 'string') {
        this.query = [
          {
            path: query
          }
        ];
      } else if (Nex.Utils.toType(query) === 'array') {
        this.query = query;
      } else if (Nex.Utils.toType(query) === 'object') {
        this.log('I am an Object');
        this.query = [query];
      } else {
        return this.log('Panel: no valid query');
      }
      this.log('@query: ', this.query);
      this.promises = [];
      this.data = [];
      _ref = this.query;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        q = _ref[_i];
        this.log('q in @query: ', q);
        this.promises.push(Nex.Models.Asset.get(q, false).done((function(_this) {
          return function() {
            var _ref1;
            _this.log.apply(_this, ['(Nex.Panel) result: '].concat(__slice.call(arguments)));
            return (_ref1 = _this.data).push.apply(_ref1, arguments);
          };
        })(this)).fail((function(_this) {
          return function() {
            return _this.log("Panel: Could not get data for panel " + _this.query);
          };
        })(this)));
      }
      return $.when.apply($, this.promises).done((function(_this) {
        return function() {
          _this.log('done @promises, @data: ', _this.promises, _this.data);
          return _this.trigger('ready', _this.data);
        };
      })(this));
    },
    setTitle: function(result) {
      var title;
      title = Nex.Models.Setting.findByAttribute('name', 'title');
      return $('title').text("" + (result.headline || 'Imago') + " - " + title.value);
    }
  };

  module.exports = Nex.Panel;

}).call(this);

//# sourceMappingURL=panel.map
