// Generated by CoffeeScript 1.9.3
(function() {
  var Nex,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Nex = this.Nex || require('nex');

  Nex.Pusher = {
    dispatch_message: function(msg) {
      var message, methods;
      message = typeof msg === 'string' ? JSON.parse(msg) : msg;
      methods = {
        update_proxy: this.proxy(this._update_proxy),
        serving_url_change: this.proxy(this._serving_url_change),
        add: this.proxy(this._add),
        "delete": this.proxy(this._delete),
        switch_ids: this.proxy(this._swith_ids)
      };
      return methods[message.action](message);
    },
    parse_data: function(data, options) {
      var adds, asset, assetchng, assets, deletes, existing, i, id, item, j, k, len, len1, orderchange, ref, results, tgllist;
      if (options == null) {
        options = {
          ajax: false
        };
      }
      results = [];
      for (j = 0, len = data.length; j < len; j++) {
        asset = data[j];
        if (!asset) {
          continue;
        }
        if (asset.kind === 'Collection') {
          existing = this.globalExists(asset.id);
          if (existing) {
            tgllist = this._diffresult(asset.hidden, existing.hidden);
            assetchng = this._diffresult(asset.assets, existing.assets);
            adds = (function() {
              var k, len1, results1;
              results1 = [];
              for (k = 0, len1 = assetchng.length; k < len1; k++) {
                i = assetchng[k];
                if (indexOf.call(existing.assets, i) < 0) {
                  results1.push(i);
                }
              }
              return results1;
            })();
            deletes = (function() {
              var k, len1, results1;
              results1 = [];
              for (k = 0, len1 = assetchng.length; k < len1; k++) {
                i = assetchng[k];
                if (indexOf.call(asset.assets, i) < 0) {
                  results1.push(i);
                }
              }
              return results1;
            })();
            if (!assetchng.length) {
              orderchange = this._orderdiff(existing.assets, asset.assets);
            }
          }
        }
        item = this.create_or_update(asset, options);
        if (tgllist != null) {
          for (k = 0, len1 = tgllist.length; k < len1; k++) {
            id = tgllist[k];
            if ((ref = this.globalExists(id)) != null) {
              ref.trigger('visibility.tile', {
                collection: item.id
              });
            }
          }
        }
        if (deletes != null ? deletes.length : void 0) {
          assets = (function() {
            var l, len2, ref1, results1;
            ref1 = (function() {
              var len2, m, results2;
              results2 = [];
              for (m = 0, len2 = deletes.length; m < len2; m++) {
                id = deletes[m];
                results2.push(this.globalExists(id));
              }
              return results2;
            }).call(this);
            results1 = [];
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              asset = ref1[l];
              if (asset) {
                results1.push(asset);
              }
            }
            return results1;
          }).call(this);
          if (assets.length) {
            item.trigger('delete.assets', assets);
          }
        }
        if (adds != null ? adds.length : void 0) {
          this._triggeradds(adds, item);
        }
        if (orderchange != null ? orderchange.length : void 0) {
          results.push(item.trigger('update.assets'));
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    _triggeradds: function(assetids, collection) {
      return this.get({
        ids: assetids
      }).done((function(_this) {
        return function(result) {
          var attrs, elem, i, id, j, kind, len, newObjs, toCreate, x;
          if (assetids.length > result.items.length) {
            toCreate = (function() {
              var j, len, results;
              results = [];
              for (j = 0, len = assetids.length; j < len; j++) {
                i = assetids[j];
                if (indexOf.call((function() {
                  var k, len1, ref, results1;
                  ref = result.items;
                  results1 = [];
                  for (k = 0, len1 = ref.length; k < len1; k++) {
                    x = ref[k];
                    results1.push(x.id);
                  }
                  return results1;
                })(), i) < 0) {
                  results.push(i);
                }
              }
              return results;
            })();
            newObjs = [];
            for (j = 0, len = toCreate.length; j < len; j++) {
              id = toCreate[j];
              kind = id.indexOf('Col') !== 0 ? 'Upload' : 'Collection';
              attrs = {
                id: id,
                kind: kind,
                name: 'Processing',
                meta: {}
              };
              if (kind === 'Collection') {
                attrs.assets = [];
                attrs.hidden = [];
              }
              elem = _this.get_model(id).create(attrs, {
                ajax: false
              });
              newObjs.push(elem);
            }
            result.items = result.items.concat(newObjs);
            result.count = result.items.length;
          }
          result.items.sort(function(a, b) {
            return collection.assets.indexOf(a.id) - collection.assets.indexOf(b.id);
          });
          result.items.reverse();
          if (result.count > 0) {
            return collection.trigger('add.assets', result.items);
          }
        };
      })(this));
    },
    _diffresult: function(a, b) {
      var i, result;
      result = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = a.length; j < len; j++) {
          i = a[j];
          if (indexOf.call(b, i) < 0) {
            results.push(i);
          }
        }
        return results;
      })();
      return result.concat((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = b.length; j < len; j++) {
          i = b[j];
          if (indexOf.call(a, i) < 0) {
            results.push(i);
          }
        }
        return results;
      })());
    },
    _orderdiff: function(listA, listB) {
      return listA.filter(function(item, idx, list) {
        return idx !== listB.indexOf(item);
      });
    },
    _update_proxy: function(message) {
      return this.get({
        ids: message.ids
      }, false);
    },
    _serving_url_change: function(message) {
      var asset;
      asset = this.globalFind(message.id);
      if (asset && asset.count() < message.count) {
        return this.get({
          ids: [message.id]
        });
      } else if (asset && message.s_url && asset.serving_url !== message.s_url) {
        asset.serving_url = message.s_url;
        return asset.save({
          ajax: false
        });
      } else if (!asset) {
        return this.get({
          ids: [message.id]
        }, false);
      }
    },
    _add: function(message) {
      if (message.data) {
        return this.parse_data(message.data);
      } else {
        return this.getSearch({
          ids: [message.id]
        }).done((function(_this) {
          return function(data, status, xhr) {
            return _this.parse_data(data);
          };
        })(this));
      }
    },
    _delete: function(message) {
      var asset;
      asset = this.globalExists(message.id);
      return asset != null ? asset.destroy({
        ajax: false
      }) : void 0;
    },
    _swith_ids: function(message) {
      var CollectionModel, asset, col, cols, j, k, len, len1, p_holder, ref, ref1;
      CollectionModel = this.get_model('Collection');
      asset = this.globalExists(message.from_id);
      if (!asset) {
        return;
      }
      if (message.to_id === message.from_id) {
        return;
      }
      if (this.globalExists(message.to_id)) {
        p_holder = asset;
        asset = this.globalFind(message.to_id);
        cols = CollectionModel.select(function(col) {
          var ref;
          return ref = p_holder.id, indexOf.call(col.assets, ref) >= 0;
        });
        for (j = 0, len = cols.length; j < len; j++) {
          col = cols[j];
          col.assets.splice(col.assets.indexOf(p_holder.id), 1, asset.id);
          if (((ref = col.serving_url) != null ? ref.indexOf('http://') : void 0) < 0) {
            col.serving_url = asset.serving_url;
          }
          col.save();
          col.trigger('add.assets', [asset.id]);
          col.trigger('delete.assets', [p_holder.id]);
        }
        p_holder.destroy({
          ajax: false
        });
      } else {
        asset.changeID(message.to_id, {
          ajax: false
        });
        cols = CollectionModel.select(function(col) {
          var ref1;
          return ref1 = message.from_id, indexOf.call(col.assets, ref1) >= 0;
        });
        for (k = 0, len1 = cols.length; k < len1; k++) {
          col = cols[k];
          if (col && (ref1 = message.from_id, indexOf.call(col.assets, ref1) >= 0)) {
            col.assets.splice(col.assets.indexOf(message.from_id), 1, asset.id);
            col.hidden.splice(col.assets.indexOf(message.from_id), 1, asset.id);
            col.save();
          }
        }
      }
      return asset.save({
        ajax: false
      });
    }
  };

  module.exports = Nex.Pusher;

}).call(this);
