// Generated by CoffeeScript 1.7.1
(function() {
  var Nex,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Nex = this.Nex || require('nex');

  Nex.Search = {
    get: function(params, abortable, fetchAssets) {
      var deferred, getAssetsDone, getAssetsFail, getCollectionDone, getCollectionFail, getSearchDone, getSearchFail, promise, result;
      if (fetchAssets == null) {
        fetchAssets = true;
      }
      if (abortable === void 0 && Nex.client === 'public') {
        abortable = true;
      }
      if (abortable && this.jqXHR) {
        this.jqXHR.abort('abort');
      }
      params = this.objListToDict(params);
      deferred = $.Deferred();
      promise = deferred.promise();
      result = {
        items: [],
        count: 0
      };
      getAssetsDone = (function(_this) {
        return function(assets) {
          if (result.kind === 'Collection') {
            console.log('getAssetsDone', result);
            result.items = _this.sortassets(result.assets, assets);
            result.count = assets.length;
            console.log('offset', _this.offset, 'assets', result.assets.length, 'page', _this.page);
            result.next = result.items.length + _this.offset < result.assets.length ? true : false;
            result.prev = _this.page > 1 ? true : false;
            console.log('result', result);
          }
          return deferred.resolve(result);
        };
      })(this);
      getAssetsFail = function() {
        return deferred.reject();
      };
      getCollectionDone = (function(_this) {
        return function(collection) {
          if (!collection) {
            return deferred.resolve(result);
          }
          result = collection;
          if (!fetchAssets) {
            return deferred.resolve(result);
          }
          return _this.getAssets(collection, params).done(getAssetsDone).fail(getAssetsFail);
        };
      })(this);
      getCollectionFail = function() {
        return deferred.reject();
      };
      getSearchDone = (function(_this) {
        return function(data, status, xhr) {
          var assets;
          assets = _this.parseData(data);
          result.items = assets;
          result.count = assets.length;
          return deferred.resolve(result);
        };
      })(this);
      getSearchFail = function(xhr, statusText, error) {
        return deferred.reject(arguments);
      };
      if (params.path) {
        this.getCollection(params).done(getCollectionDone).fail(getCollectionFail);
      } else {
        this.getSearch(params).done(getSearchDone).fail(getSearchFail);
      }
      return promise;
    },
    getSearch: function(params) {
      this.jqXHR = $.ajax({
        contentType: 'application/json',
        dataType: 'json',
        processData: false,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'NexClient': Nex.client
        },
        type: 'POST',
        data: JSON.stringify(params),
        url: this.getSearchUrl()
      }).always((function(_this) {
        return function() {
          return _this.jqXHR = null;
        };
      })(this));
      return this.jqXHR;
    },
    getCollection: function(params) {
      var Collection, collection, colparams, deferred, path, promise;
      deferred = $.Deferred();
      promise = deferred.promise();
      path = params.path[0];
      if (path !== '/') {
        path = path.replace(/\/$/, "");
      }
      Collection = this.get_model('Collection');
      collection = Collection.findByAttribute('path', path);
      if (collection) {
        return deferred.resolve(collection);
      } else {
        colparams = {
          'path': params.path
        };
        if (params.page) {
          colparams.page = params.page;
        }
        if (params.pagesize) {
          colparams.pagesize = params.pagesize;
        }
        this.getSearch(colparams).done((function(_this) {
          return function(data, status, xhr) {
            delete params.path;
            collection = _this.parseData(data)[0];
            return deferred.resolve(collection);
          };
        })(this));
      }
      return promise;
    },
    getAssets: function(collection, params) {
      var assets, deferred, id, ids, promise, toFetch;
      deferred = $.Deferred();
      promise = deferred.promise();
      delete params.path;
      if (collection.kind === 'Collection') {
        toFetch = collection.assets;
        assets = [];
        if (!Object.keys(params).length) {
          toFetch = (function() {
            var _i, _len, _ref, _results;
            _ref = collection.assets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (!this.globalExists(id)) {
                _results.push(id);
              }
            }
            return _results;
          }).call(this);
          assets = (function() {
            var _i, _len, _ref, _results;
            _ref = collection.assets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (this.globalExists(id)) {
                _results.push(this.globalFind(id));
              }
            }
            return _results;
          }).call(this);
        }
        if (Object.keys(params).length === 1 && params.hasOwnProperty('kind')) {
          ids = (function() {
            var _i, _len, _ref, _ref1, _results;
            _ref = collection.assets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              if (_ref1 = this.id_to_kind(id), __indexOf.call(params.kind, _ref1) >= 0) {
                _results.push(id);
              }
            }
            return _results;
          }).call(this);
          toFetch = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              if (!this.globalExists(id)) {
                _results.push(id);
              }
            }
            return _results;
          }).call(this);
          assets = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              if (this.globalExists(id)) {
                _results.push(this.globalFind(id));
              }
            }
            return _results;
          }).call(this);
        }
        if (Object.keys(params).length === 2 && params.hasOwnProperty('page') && params.hasOwnProperty('pagesize')) {
          this.page = params.page;
          this.offset = (params.page - 1) * params.pagesize;
          this.limit = params.pagesize * params.page;
          ids = collection.assets.slice(this.offset, this.limit);
          toFetch = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              if (!this.globalExists(id)) {
                _results.push(id);
              }
            }
            return _results;
          }).call(this);
          assets = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = ids.length; _i < _len; _i++) {
              id = ids[_i];
              if (this.globalExists(id)) {
                _results.push(this.globalFind(id));
              }
            }
            return _results;
          }).call(this);
        }
        if (!toFetch.length) {
          return deferred.resolve(assets);
        }
        params.ids = toFetch;
        params.ancestor = collection.id;
        this.getSearch(params).done((function(_this) {
          return function(data, status, xhr) {
            assets = assets.concat(_this.parseData(data));
            return deferred.resolve(assets);
          };
        })(this));
      } else {
        deferred.resolve([]);
      }
      return promise;
    },
    sortassets: function(ids, assets) {
      var asset, i, id, orderedlist, _i, _j, _len, _len1;
      orderedlist = [];
      for (_i = 0, _len = ids.length; _i < _len; _i++) {
        id = ids[_i];
        for (i = _j = 0, _len1 = assets.length; _j < _len1; i = ++_j) {
          asset = assets[i];
          if (asset.id === id) {
            orderedlist.push(asset);
            break;
          }
        }
      }
      return orderedlist;
    },
    parseData: function(data) {
      var asset, obj, objs, _i, _len;
      objs = [];
      if (typeof data === 'string') {
        data = JSON.parse(data);
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        obj = data[_i];
        asset = this.create_or_update(obj, {
          ajax: false,
          skipAc: true
        });
        objs.push(asset);
      }
      return objs;
    },
    objListToDict: function(obj_or_list) {
      var elem, key, querydict, value, _i, _len;
      querydict = {};
      if (Spine.isArray(obj_or_list)) {
        for (_i = 0, _len = obj_or_list.length; _i < _len; _i++) {
          elem = obj_or_list[_i];
          for (key in elem) {
            value = elem[key];
            querydict[key] || (querydict[key] = []);
            querydict[key].push(value);
          }
        }
      } else {
        for (key in obj_or_list) {
          value = obj_or_list[key];
          querydict[key] = Spine.isArray(value) ? value : [value];
        }
      }
      if (querydict.collection != null) {
        querydict['path'] = querydict.collection;
        delete querydict.collection;
      }
      return querydict;
    },
    getSearchUrl: function() {
      if (Nex.data === 'online' && Nex.debug) {
        return "http://" + Nex.tenant + ".imagoapp.com/api/v2/search";
      } else {
        return "/api/v2/search";
      }
    }
  };

  module.exports = Nex.Search;

}).call(this);

//# sourceMappingURL=search.map
