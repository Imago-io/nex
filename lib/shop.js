// Generated by CoffeeScript 1.9.3
(function() {
  var Nex, Option, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Nex = this.Nex || require('nex');

  _ = require('underscore');

  Nex.Widgets.Shop = (function(superClass) {
    extend(Shop, superClass);

    Shop.prototype.logPrefix = '(App) ShopWidget: ';

    Shop.prototype.className = 'shop-widget';

    Shop.prototype.elements = {
      '.wrapper': 'wrapper',
      '.error': 'error',
      '.price': 'price'
    };

    Shop.prototype.events = {
      'tap .add': 'addToCart'
    };

    function Shop() {
      this.addToCart = bind(this.addToCart, this);
      this.closeOptions = bind(this.closeOptions, this);
      this.checkPresale = bind(this.checkPresale, this);
      this.getVariant = bind(this.getVariant, this);
      this.update = bind(this.update, this);
      Shop.__super__.constructor.apply(this, arguments);
      if (!this.template) {
        return this.log("shop widget requires template");
      }
      this.tmpl = require(this.template);
      this.controllers = [];
      this.item = this.item || {};
      this.render();
    }

    Shop.prototype.render = function() {
      var i, len, onPresale, opt, ref, ref1, results, variant;
      this.clear();
      variant = this.getVariant();
      onPresale = this.checkPresale();
      this.html(this.tmpl({
        asset: this.asset,
        variant: variant,
        presale: onPresale || false,
        onSale: variant && ((ref = variant.meta.discounted) != null ? ref.value[Nex.currency] : void 0) ? variant.meta.discounted : false,
        href: window.location.href,
        Nex: Nex
      }));
      ref1 = this.options;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        opt = ref1[i];
        this.add(this[opt] = new Option({
          name: opt,
          item: this.item,
          asset: this.asset
        }));
        this.listenTo(this[opt], 'update', this.update);
        results.push(this.listenTo(this[opt], 'dropdown', this.closeOptions));
      }
      return results;
    };

    Shop.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.wrapper.append(controller.el);
    };

    Shop.prototype.update = function(params) {
      this.item[params.key] = params.value;
      return this.render();
    };

    Shop.prototype.getVariant = function() {
      var variant;
      if (_.keys(this.item).length !== this.options.length) {
        return false;
      }
      variant = _.filter(this.asset.variants, (function(_this) {
        return function(variant) {
          var key, ref, status, value;
          status = true;
          ref = _this.item;
          for (key in ref) {
            value = ref[key];
            key = Nex.Utils.singularize(key);
            if (String(variant.meta[key].value) !== String(value)) {
              status = false;
            }
          }
          return status;
        };
      })(this));
      return variant[0];
    };

    Shop.prototype.checkPresale = function() {
      var i, len, ref, variant;
      ref = this.asset.variants;
      for (i = 0, len = ref.length; i < len; i++) {
        variant = ref[i];
        if ((variant.meta.presale != null) === true) {
          return true;
        }
      }
    };

    Shop.prototype.closeOptions = function(option) {
      var controller, i, len, ref, results;
      ref = this.controllers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        controller = ref[i];
        if (controller.name === option || controller.open === false) {
          continue;
        }
        results.push(controller.toggleDropdown());
      }
      return results;
    };

    Shop.prototype.clear = function() {
      var controller, i, len, ref;
      ref = this.controllers;
      for (i = 0, len = ref.length; i < len; i++) {
        controller = ref[i];
        controller.release();
      }
      return this.stopListening();
    };

    Shop.prototype.release = function() {
      this.clear();
      return Shop.__super__.release.apply(this, arguments);
    };

    Shop.prototype.addToCart = function() {
      var key, price, product, ref, ref1, ref2, value, variant;
      variant = this.getVariant();
      if (!variant) {
        return this.error.html('please choose size and color');
      } else if (((ref = variant.meta.stock) != null ? ref.value : void 0) === 0) {
        return this.error.html('sorry, out of stock');
      }
      if (variant.meta.discounted) {
        price = variant.meta.discounted.value;
      } else {
        price = variant.meta.price.value;
      }
      product = {
        serving_url: ((ref1 = variant.meta.serving_url) != null ? ref1.value : void 0) || this.asset.serving_url,
        price: price,
        headline: this.asset.getMeta('title', ''),
        description: this.asset.getMeta('description', '')
      };
      ref2 = this.item;
      for (key in ref2) {
        value = ref2[key];
        key = Nex.Utils.singularize(key);
        product[key] = value;
      }
      return Nex.Models.CartItem.addToCart(variant.id, 1, product);
    };

    return Shop;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Shop;

  Option = (function(superClass) {
    extend(Option, superClass);

    Option.prototype.logPrefix = '(App) option: ';

    Option.prototype.className = 'option select';

    Option.prototype.events = {
      'tap': 'toggleDropdown',
      'tap .choice': 'update'
    };

    function Option() {
      this.globalClick = bind(this.globalClick, this);
      this.toggleDropdown = bind(this.toggleDropdown, this);
      this.checkOption = bind(this.checkOption, this);
      Option.__super__.constructor.apply(this, arguments);
      this.tmpl = require('views/option');
      this.el.addClass(this.name);
      this.opts = this.asset.options()[this.name];
      this.open = false;
      this.render();
    }

    Option.prototype.render = function() {
      this.html(this.tmpl({
        name: this.name,
        item: this.item,
        options: this.opts,
        checkOption: this.checkOption
      }));
      return $('body').on('tap', this.globalClick);
    };

    Option.prototype.checkOption = function(option) {
      var i, len, onSale, ref, ref1, status, totalStock, variant, variants;
      status = {
        notAvailable: false,
        soldOut: false,
        onSale: false
      };
      variants = _.filter(this.asset.variants, (function(_this) {
        return function(variant) {
          var key, name, passed, ref, value;
          passed = true;
          name = Nex.Utils.singularize(_this.name);
          if (variant.meta[name].value !== option) {
            passed = false;
          }
          if (!_.isEmpty(_this.item)) {
            ref = _this.item;
            for (key in ref) {
              value = ref[key];
              if (key === _this.name) {
                continue;
              }
              key = Nex.Utils.singularize(key);
              if (String(variant.meta[key].value) !== String(value)) {
                passed = false;
              }
            }
          }
          return passed;
        };
      })(this));
      if (variants.length === 0) {
        status.notAvailable = true;
      } else {
        totalStock = 0;
        onSale = true;
        for (i = 0, len = variants.length; i < len; i++) {
          variant = variants[i];
          totalStock += (((ref = variant.meta.stock) != null ? ref.value : void 0) != null) || 0;
          if (!(variant.meta.discounted && ((ref1 = variant.meta.discounted) != null ? ref1.value[Nex.currency] : void 0) > 0)) {
            onSale = false;
            continue;
          }
        }
        if (!(totalStock > 0)) {
          status.soldOut = true;
        }
        status.onSale = onSale;
      }
      return status;
    };

    Option.prototype.toggleDropdown = function(e) {
      this.open = !this.open;
      this.el.toggleClass('active', this.open);
      if (this.open) {
        return this.trigger('dropdown', this.name);
      }
    };

    Option.prototype.update = function(e) {
      var data;
      data = {
        key: this.name,
        value: $(e.target).data('value')
      };
      return this.trigger('update', data);
    };

    Option.prototype.globalClick = function(e) {
      var target;
      target = $(e.target);
      if (!target.closest('.option').length && this.open) {
        return this.toggleDropdown();
      }
    };

    return Option;

  })(Spine.Controller);

}).call(this);
