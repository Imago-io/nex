// Generated by CoffeeScript 1.7.1
(function() {
  var Nex, Option, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nex = this.Nex || require('nex');

  _ = require('underscore');

  Nex.Widgets.Shop = (function(_super) {
    __extends(Shop, _super);

    Shop.prototype.logPrefix = '(App) ShopWidget: ';

    Shop.prototype.className = 'shopWidget';

    Shop.prototype.elements = {
      '.wrapper': 'wrapper',
      '.error': 'error',
      '.price': 'price'
    };

    Shop.prototype.events = {
      'tap .add': 'addToCart'
    };

    function Shop() {
      this.addToCart = __bind(this.addToCart, this);
      this.closeOptions = __bind(this.closeOptions, this);
      this.getVariant = __bind(this.getVariant, this);
      this.update = __bind(this.update, this);
      Shop.__super__.constructor.apply(this, arguments);
      this.tmpl = require('views/shopwidget');
      this.controllers = [];
      this.item = {};
      this.render();
    }

    Shop.prototype.render = function() {
      var opt, variant, _i, _len, _ref, _results;
      this.clear();
      variant = this.getVariant();
      this.html(this.tmpl({
        asset: this.asset,
        variant: variant,
        onSale: variant ? variant.meta.discounted : false,
        href: window.location.href,
        Nex: Nex
      }));
      _ref = this.options;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        this.add(this[opt] = new Option({
          name: opt,
          item: this.item,
          asset: this.asset
        }));
        this.listenTo(this[opt], 'update', this.update);
        _results.push(this.listenTo(this[opt], 'dropdown', this.closeOptions));
      }
      return _results;
    };

    Shop.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.wrapper.append(controller.el);
    };

    Shop.prototype.update = function(params) {
      this.item[params.key] = params.value;
      return this.render();
    };

    Shop.prototype.getVariant = function() {
      var variant;
      if (_.keys(this.item).length !== this.options.length) {
        return false;
      }
      variant = _.filter(this.asset.variants, (function(_this) {
        return function(variant) {
          var key, status, value, _ref;
          status = true;
          _ref = _this.item;
          for (key in _ref) {
            value = _ref[key];
            key = Nex.Utils.singularize(key);
            if (variant.meta[key].value !== value) {
              status = false;
            }
          }
          return status;
        };
      })(this));
      return variant[0];
    };

    Shop.prototype.closeOptions = function(option) {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        if (controller.name === option || controller.open === false) {
          continue;
        }
        _results.push(controller.toggleDropdown());
      }
      return _results;
    };

    Shop.prototype.clear = function() {
      var controller, _i, _len, _ref;
      _ref = this.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        controller.release();
      }
      return this.stopListening();
    };

    Shop.prototype.release = function() {
      this.clear();
      return Shop.__super__.release.apply(this, arguments);
    };

    Shop.prototype.addToCart = function() {
      var key, price, product, value, variant, _ref, _ref1, _ref2;
      variant = this.getVariant();
      if (!variant) {
        return this.error.html('please choose size and color');
      } else if (((_ref = variant.meta.stock) != null ? _ref.value : void 0) === 0) {
        return this.error.html('sorry, out of stock');
      }
      if (variant.meta.discounted) {
        price = variant.meta.discounted.value;
      } else {
        price = variant.meta.price.value;
      }
      product = {
        serving_url: ((_ref1 = variant.meta.serving_url) != null ? _ref1.value : void 0) || this.asset.serving_url,
        price: price,
        headline: this.asset.getMeta('title', ''),
        description: this.asset.getMeta('description', '')
      };
      _ref2 = this.item;
      for (key in _ref2) {
        value = _ref2[key];
        key = Nex.Utils.singularize(key);
        product[key] = value;
      }
      return Nex.Models.CartItem.addToCart(variant.id, 1, product);
    };

    return Shop;

  })(Spine.Controller);

  Option = (function(_super) {
    __extends(Option, _super);

    Option.prototype.logPrefix = '(App) option: ';

    Option.prototype.className = 'option select';

    Option.prototype.events = {
      'tap': 'toggleDropdown',
      'tap .choice': 'update'
    };

    function Option() {
      this.globalClick = __bind(this.globalClick, this);
      this.toggleDropdown = __bind(this.toggleDropdown, this);
      this.checkOption = __bind(this.checkOption, this);
      Option.__super__.constructor.apply(this, arguments);
      this.tmpl = require('views/option');
      this.el.addClass(this.name);
      this.opts = this.asset.options()[this.name];
      this.open = false;
      this.render();
    }

    Option.prototype.render = function() {
      this.html(this.tmpl({
        name: this.name,
        item: this.item,
        options: this.opts,
        checkOption: this.checkOption
      }));
      return $('body').on('tap', this.globalClick);
    };

    Option.prototype.checkOption = function(option) {
      var status, totalStock, variant, variants, _i, _len;
      status = {
        notAvailable: false,
        soldOut: false,
        onSale: false
      };
      variants = _.filter(this.asset.variants, (function(_this) {
        return function(variant) {
          var key, name, passed, value, _ref;
          passed = true;
          name = Nex.Utils.singularize(_this.name);
          if (variant.meta[name].value !== option) {
            passed = false;
          }
          if (!_.isEmpty(_this.item)) {
            _ref = _this.item;
            for (key in _ref) {
              value = _ref[key];
              if (key === _this.name) {
                continue;
              }
              key = Nex.Utils.singularize(key);
              if (variant.meta[key].value !== value) {
                passed = false;
              }
            }
          }
          return passed;
        };
      })(this));
      if (variants.length === 0) {
        status.notAvailable = true;
      } else {
        totalStock = 0;
        for (_i = 0, _len = variants.length; _i < _len; _i++) {
          variant = variants[_i];
          totalStock += variant.meta.stock.value || 0;
          if (variant.meta.discounted) {
            status.onSale = true;
            continue;
          }
        }
        if (!(totalStock > 0)) {
          status.soldOut = true;
        }
      }
      return status;
    };

    Option.prototype.toggleDropdown = function(e) {
      this.open = !this.open;
      this.el.toggleClass('active', this.open);
      if (this.open) {
        return this.trigger('dropdown', this.name);
      }
    };

    Option.prototype.update = function(e) {
      var data;
      data = {
        key: this.name,
        value: $(e.target).data('value')
      };
      return this.trigger('update', data);
    };

    Option.prototype.globalClick = function(e) {
      var target;
      target = $(e.target);
      if (!target.closest('.option').length && this.open) {
        return this.toggleDropdown();
      }
    };

    return Option;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Shop;

}).call(this);
