// Generated by CoffeeScript 1.7.1
(function() {
  var Nex, Slide,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("./panel");

  Nex = this.Nex || require('nex');

  Nex.Widgets.Slider = (function(_super) {
    __extends(Slider, _super);

    Slider.include(Nex.Panel);

    Slider.prototype.logPrefix = '(App) Nex.Slider: ';

    Slider.prototype.className = 'nexslider';

    Slider.prototype.events = {
      'tap .next': 'next',
      'tap .prev': 'prev',
      'swipeLeft': 'next',
      'swipeRight': 'prev',
      'keyup': 'onKeyup'
    };

    Slider.prototype.defaults = {
      animation: 'fade',
      easing: 'swing',
      sizemode: 'fit',
      current: 0,
      autoplay: true,
      enablekeys: true,
      enablearrows: true,
      sizemode: 'fit',
      subslides: false,
      loop: true,
      noResize: false,
      current: 0,
      lazy: false,
      align: 'center center'
    };

    function Slider() {
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this.render = __bind(this.render, this);
      this.onKeyup = __bind(this.onKeyup, this);
      var key, value, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Slider.__super__.constructor.apply(this, arguments);
      this.el.addClass(this.animation);
      this.manager = new Spine.Manager;
      this.bind('ready', this.render);
      this.id = Nex.Utils.uuid();
      if (this.enablekeys) {
        $(document).on("keydown." + this.id, this.onKeyup);
      }
      if (this["class"]) {
        this.el.addClass(this["class"]);
      }
      if (this.enablearrows) {
        this.html('<div class="prev"></div><div class="next"></div>');
      }
      if (this.path) {
        this.getData(this.path);
      } else {
        this.active(this.getData);
      }
      if (this.name) {
        this.el.addClass(this.name);
      }
    }

    Slider.prototype.onKeyup = function(e) {
      if (!(this.enablekeys && this.isActive())) {
        return;
      }
      switch (e.keyCode) {
        case 37:
          return this.prev();
        case 39:
          return this.next();
      }
    };

    Slider.prototype.render = function(result) {
      var asset, col, i, _i, _j, _len, _len1, _ref;
      if (!result.length) {
        return;
      }
      if (!this.isActive()) {
        this.activate();
      }
      this.log('result: ', result);
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        col = result[_i];
        _ref = col.items;
        for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
          asset = _ref[i];
          this.add(new Slide({
            asset: asset,
            sizemode: this.sizemode,
            subslides: this.subslides,
            height: this.height,
            width: this.width,
            noResize: this.noResize,
            lazy: this.lazy,
            align: this.align
          }));
        }
      }
      return this.goto(this.current);
    };

    Slider.prototype.clear = function() {
      var cont, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        _results.push(this.controllers[0].release());
      }
      return _results;
    };

    Slider.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller);
    };

    Slider.prototype.next = function() {
      if (this.current === this.manager.controllers.length - 1) {
        this.trigger('end');
        if (this.loop) {
          return this.goto('first');
        }
      } else {
        this.goto(this.current + 1);
        return this.trigger('next');
      }
    };

    Slider.prototype.prev = function() {
      if (this.current === 0) {
        this.trigger('start');
        if (this.loop) {
          return this.goto('last');
        }
      } else {
        this.goto(this.current - 1);
        return this.trigger('prev');
      }
    };

    Slider.prototype.goto = function(slide) {
      var next, _ref;
      switch (slide) {
        case 'first':
          next = 0;
          break;
        case 'last':
          next = this.manager.controllers.length - 1;
          break;
        default:
          next = slide;
      }
      this.current = next;
      if ((_ref = this.manager.controllers[this.current]) != null) {
        _ref.active();
      }
      this.el.removeClass('first last');
      if (this.current === 0) {
        this.trigger('first');
        this.el.addClass('first');
      }
      if (this.current === this.manager.controllers.length - 1) {
        this.trigger('last');
        return this.el.addClass('last');
      }
    };

    Slider.prototype.release = function() {
      var cont, _i, _len, _ref;
      if (this.enablekeys) {
        $(document).off("keydown." + this.id);
      }
      _ref = this.manager.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        this.manager.controllers[0].release();
      }
      return Slider.__super__.release.apply(this, arguments);
    };

    return Slider;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Slider;

  Slide = (function(_super) {
    __extends(Slide, _super);

    Slide.include(Nex.Panel);

    Slide.prototype.logPrefix = '(App) Slide: ';

    Slide.prototype.className = 'slide';

    function Slide() {
      Slide.__super__.constructor.apply(this, arguments);
      this.controllers = [];
      if (this.asset.assets && this.subslides) {
        this.bind('ready', this.render);
        this.getData(this.asset.path);
      } else {
        this.render(this.asset);
      }
    }

    Slide.prototype.render = function(result) {
      var asset, assets, html, i, kind, _i, _len, _ref, _ref1, _results;
      assets = (result != null ? result.items : void 0) || result;
      if (assets.length && this.subslides) {
        _results = [];
        for (i = _i = 0, _len = assets.length; _i < _len; i = ++_i) {
          asset = assets[i];
          _results.push(this.add(new Slide({
            asset: asset,
            sizemode: this.sizemode,
            className: 'slidecontent',
            height: this.height,
            width: this.width,
            noResize: this.noResize,
            lazy: this.lazy,
            align: this.align
          })));
        }
        return _results;
      } else {
        kind = (_ref = result.kind) === 'Image' || _ref === 'Video' ? result.kind : 'Image';
        this.add(this["asset"] = new Nex.Widgets[kind]({
          src: result.serving_url,
          align: ((_ref1 = result.meta.crop) != null ? _ref1.value : void 0) || this.align,
          resolution: result.resolution,
          uuid: result.id,
          formats: result.formats,
          sizemode: this.sizemode,
          height: this.height,
          width: this.width,
          noResize: this.noResize,
          lazy: this.lazy
        }));
        html = result.getMeta('text', result.getMeta('html', ''));
        if (html) {
          return this.append(html);
        }
      }
    };

    Slide.prototype.activate = function() {
      var cont, _i, _len, _ref, _results;
      Slide.__super__.activate.apply(this, arguments);
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        _results.push(cont != null ? cont.preload() : void 0);
      }
      return _results;
    };

    Slide.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.append(controller);
    };

    Slide.prototype.clear = function() {
      var cont, _i, _len, _ref;
      _ref = this.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        this.controllers[0].release();
      }
      this.controllers = [];
      return this.html('');
    };

    return Slide;

  })(Spine.Controller);

}).call(this);

//# sourceMappingURL=slider.map
