// Generated by CoffeeScript 1.6.3
(function() {
  var Nex,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nex = this.Nex || require('nex');

  Nex.Slider = (function(_super) {
    __extends(Slider, _super);

    Slider.include(Nex.Panel);

    Slider.prototype.logPrefix = '(App) Nex.Slider: ';

    Slider.prototype.className = 'nexslider';

    Slider.prototype.events = {
      'tap .next': 'next',
      'tap .prev': 'prev'
    };

    Slider.prototype.defaults = {
      animation: 'fade',
      easing: 'swing',
      sizemode: 'fit',
      current: 0,
      height: 500
    };

    function Slider() {
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this.render = __bind(this.render, this);
      var key, value, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Slider.__super__.constructor.apply(this, arguments);
      this.manager = new Spine.Manager;
      this.bind('ready', this.render);
      if (this.path) {
        this.getData(this.path);
      } else {
        this.active(this.getData);
      }
      this.el.height(this.height);
      this.html('<div class="prev"></div><div class="next"></div>');
    }

    Slider.prototype.render = function(result) {
      var asset, i, kind, _i, _len, _ref, _ref1;
      _ref = result.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        asset = _ref[i];
        kind = asset.kind === 'Collection' ? 'Image' : asset.kind;
        this.add(this["asset" + i] = new Nex.Widgets[kind]({
          src: asset.serving_url,
          align: ((_ref1 = asset.meta.crop) != null ? _ref1.value : void 0) || 'center center',
          resolution: asset.resolution,
          uuid: asset.id,
          formats: asset.formats,
          sizemode: 'crop',
          lazy: false
        }));
      }
      return this.manager.controllers[this.current].active();
    };

    Slider.prototype.clear = function() {
      var cont, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        _results.push(this.controllers[0].release());
      }
      return _results;
    };

    Slider.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller.el);
    };

    Slider.prototype.next = function() {
      if (!(this.current < (this.manager.controllers.length - 1))) {
        return;
      }
      this.current++;
      return this.manager.controllers[this.current].active();
    };

    Slider.prototype.prev = function() {
      if (!(this.current > 0)) {
        return;
      }
      this.current--;
      return this.manager.controllers[this.current].active();
    };

    return Slider;

  })(Spine.Controller);

  module.exports = Nex.Slider;

}).call(this);

/*
//@ sourceMappingURL=slider.map
*/
