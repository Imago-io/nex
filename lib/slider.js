// Generated by CoffeeScript 1.7.1
(function() {
  var Nex, Slide,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("./panel");

  Nex = this.Nex || require('nex');

  Nex.Widgets.Slider = (function(_super) {
    __extends(Slider, _super);

    Slider.include(Nex.Panel);

    Slider.prototype.logPrefix = '(App) Nex.Slider: ';

    Slider.prototype.className = 'nexslider';

    Slider.prototype.events = {
      'tap .next': 'goNext',
      'tap .prev': 'goPrev',
      'swipeLeft': 'goNext',
      'swipeRight': 'goPrev',
      'keyup': 'onKeyup',
      'touchstart': 'onTouchStart',
      'touchmove': 'onTouchMove',
      'touchend': 'onTouchEnd'
    };

    Slider.prototype.defaults = {
      animation: 'fade',
      sizemode: 'fit',
      current: 0,
      enablekeys: true,
      enablearrows: true,
      enablehtml: true,
      subslides: false,
      loop: true,
      noResize: false,
      current: 0,
      lazy: false,
      align: 'center center'
    };

    function Slider() {
      this.goPrev = __bind(this.goPrev, this);
      this.goNext = __bind(this.goNext, this);
      this.render = __bind(this.render, this);
      this.onTouchEnd = __bind(this.onTouchEnd, this);
      this.onTouchMove = __bind(this.onTouchMove, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onKeyup = __bind(this.onKeyup, this);
      var key, value, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Slider.__super__.constructor.apply(this, arguments);
      this.el.addClass(this.animation);
      this.manager = new Spine.Manager;
      this.slides = this.manager.controllers;
      this.bind('ready', this.render);
      this.id || (this.id = Nex.Utils.uuid());
      this.touch = {};
      if (this.enablekeys) {
        $(document).on("keydown." + this.id, this.onKeyup);
      }
      if (this["class"]) {
        this.el.addClass(this["class"]);
      }
      if (this.data) {
        this.el.data(this.data);
      }
      if (this.enablearrows) {
        this.html('<div class="prev"></div><div class="next"></div>');
      }
      if (this.path) {
        this.getData(this.path);
      } else {
        this.active(this.getData);
      }
      if (this.name) {
        this.el.addClass(this.name);
      }
    }

    Slider.prototype.onKeyup = function(e) {
      if (!(this.enablekeys && this.isActive())) {
        return;
      }
      switch (e.keyCode) {
        case 37:
          return this.goPrev();
        case 39:
          return this.goNext();
      }
    };

    Slider.prototype.swipeDirection = function(x1, x2, y1, y2) {
      var xDelta, yDelta;
      xDelta = Math.abs(x1 - x2);
      yDelta = Math.abs(y1 - y2);
      if (xDelta >= yDelta) {
        if (x1 - x2 > 0) {
          return 'Left';
        } else {
          return 'Right';
        }
      } else {
        if (y1 - y2 > 0) {
          return 'Up';
        } else {
          return 'Down';
        }
      }
    };

    Slider.prototype.onTouchStart = function(e) {
      var delta, now;
      e.preventDefault();
      e.stopPropagation();
      e = e.originalEvent;
      now = Date.now();
      delta = now - (this.touch.last || now);
      this.touch.x1 = e.touches[0].pageX;
      this.touch.y1 = e.touches[0].pageY;
      return this.touch.last = now;
    };

    Slider.prototype.onTouchMove = function(e) {
      e.preventDefault();
      e.stopPropagation();
      e = e.originalEvent;
      this.touch.x2 = e.touches[0].pageX;
      return this.touch.y2 = e.touches[0].pageY;
    };

    Slider.prototype.onTouchEnd = function(e) {
      e.preventDefault();
      e.stopPropagation();
      e = e.originalEvent;
      if (this.touch.x2 > 0 || this.touch.y2 > 0) {
        (Math.abs(this.touch.x1 - this.touch.x2) > 30 || Math.abs(this.touch.y1 - this.touch.y2) > 30) && this.el.trigger('swipe') && this.el.trigger('swipe' + (this.swipeDirection(this.touch.x1, this.touch.x2, this.touch.y1, this.touch.y2)));
        return this.touch.x1 = this.touch.x2 = this.touch.y1 = this.touch.y2 = this.touch.last = 0;
      } else if ('last' in this.touch) {
        this.el.trigger('tap');
        return this.touch = {};
      }
    };

    Slider.prototype.render = function(result) {
      var asset, col, i, _i, _j, _len, _len1, _ref;
      if (!result.length) {
        return;
      }
      if (!this.isActive()) {
        this.activate();
      }
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        col = result[_i];
        if (!(col.items.length > 0)) {
          return;
        }
        _ref = col.items;
        for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
          asset = _ref[i];
          this.add(this[asset.normname] = new Slide({
            slider: this,
            asset: asset,
            sizemode: this.sizemode,
            subslides: this.subslides,
            height: this.height,
            width: this.width,
            noResize: this.noResize,
            lazy: this.lazy,
            align: this.align,
            enablehtml: this.enablehtml
          }));
        }
      }
      this.goto(this.current);
      return this.trigger('rendered', result);
    };

    Slider.prototype.clear = function() {
      var cont, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        _results.push(this.controllers[0].release());
      }
      return _results;
    };

    Slider.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller);
    };

    Slider.prototype.goNext = function() {
      return this.goto('next');
    };

    Slider.prototype.goPrev = function() {
      return this.goto('prev');
    };

    Slider.prototype.goto = function(slide) {
      var next, _base, _ref, _ref1, _ref2;
      if (!this.slides) {
        return this.log('no slides');
      }
      switch (slide) {
        case 'first':
          next = 0;
          break;
        case 'last':
          next = this.getLast();
          break;
        case 'next':
          next = this.getNext(this.current);
          break;
        case 'prev':
          next = this.getPrev(this.current);
          break;
        default:
          next = Number(slide);
      }
      if (!this.slides.length) {
        return;
      }
      if (this.slides.length === 1) {
        this.enablearrows = false;
        this.enablekeys = false;
        if (typeof (_base = this.slides[this.current]).active === "function") {
          _base.active();
        }
        this.el.addClass('first last');
        return;
      }
      if (!this.loop) {
        if (this.current === this.slides.length - 1 && next === this.getNext(this.current)) {
          if (this.slides.length !== 2) {
            this.trigger('end');
            return;
          }
        }
        if (this.current === 0 && next === this.getPrev(this.current)) {
          if (this.slides.length !== 2) {
            this.trigger('start');
            return;
          }
        }
      }
      if ((_ref = this.slides[this.prev]) != null) {
        _ref.el.removeClass('prevslide');
      }
      if ((_ref1 = this.slides[this.next]) != null) {
        _ref1.el.removeClass('nextslide');
      }
      this.current = next;
      this.prev = this.getPrev(this.current);
      this.next = this.getNext(this.current);
      this.slides[this.prev].el.addClass('prevslide');
      this.slides[this.next].el.addClass('nextslide');
      if ((_ref2 = this.slides[this.current]) != null) {
        _ref2.active();
      }
      this.slides[this.prev].onDeck();
      this.slides[this.next].onDeck();
      if (this.current === 0) {
        this.trigger('first');
        this.el.addClass('first');
        return this.el.removeClass('last');
      } else if (this.current === this.slides.length - 1) {
        this.trigger('last');
        this.el.addClass('last');
        return this.el.removeClass('first');
      } else {
        return this.el.removeClass('first last');
      }
    };

    Slider.prototype.getPrev = function(i) {
      if (i === 0) {
        return this.slides.length - 1;
      } else {
        return i - 1;
      }
    };

    Slider.prototype.getNext = function(i) {
      if (i === this.slides.length - 1) {
        return 0;
      } else {
        return i + 1;
      }
    };

    Slider.prototype.getLast = function() {
      return this.slides.length - 1;
    };

    Slider.prototype.release = function() {
      var cont, _i, _len, _ref;
      if (this.enablekeys) {
        $(document).off("keydown." + this.id);
      }
      _ref = this.slides;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        this.slides[0].release();
      }
      return Slider.__super__.release.apply(this, arguments);
    };

    return Slider;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Slider;

  Slide = (function(_super) {
    __extends(Slide, _super);

    Slide.include(Nex.Panel);

    Slide.prototype.logPrefix = '(App) Slide: ';

    Slide.prototype.className = 'slide';

    Slide.prototype.events = {
      'tap': 'onClick'
    };

    function Slide() {
      Slide.__super__.constructor.apply(this, arguments);
      this.controllers = [];
      if (this.asset.assets && this.subslides) {
        this.bind('ready', this.render);
        this.getData(this.asset.path);
      } else {
        this.render([this.asset]);
      }
    }

    Slide.prototype.onClick = function() {
      return this.slider.trigger('click', this);
    };

    Slide.prototype.render = function(result) {
      var asset, col, html, i, kind, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        col = result[_i];
        if (col.kind === 'Collection' && this.subslides) {
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = col.items;
            _results1 = [];
            for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
              asset = _ref[i];
              _results1.push(this.add(new Slide({
                slider: this.slider,
                asset: asset,
                sizemode: this.sizemode,
                className: 'slidecontent',
                height: this.height,
                width: this.width,
                noResize: this.noResize,
                lazy: this.lazy,
                align: this.align
              })));
            }
            return _results1;
          }).call(this));
        } else {
          kind = (_ref = col.kind) === 'Image' || _ref === 'Video' ? col.kind : 'Image';
          this.add(this["media"] = new Nex.Widgets[kind]({
            src: col.serving_url,
            align: col.getMeta('crop', 'center center'),
            resolution: col.resolution,
            uuid: col.id,
            formats: col.formats,
            sizemode: col.getMeta('sizemode', [this.sizemode])[0],
            height: this.height,
            width: this.width,
            noResize: this.noResize,
            lazy: this.lazy
          }));
          if (typeof this.enablehtml === 'boolean' && this.enablehtml) {
            html = col.getMeta('text', col.getMeta('html', ''));
          } else if (typeof this.enablehtml === 'string') {
            html = col.getMeta('text', col.getMeta(this.enablehtml, ''));
          } else if (typeof this.enablehtml === 'function') {
            html = this.enablehtml(col);
          }
          if (html) {
            _results.push(this.append(html));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Slide.prototype.activate = function() {
      var cont, _i, _len, _ref, _results;
      Slide.__super__.activate.apply(this, arguments);
      if (this.subslides) {
        _ref = this.controllers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cont = _ref[_i];
          _results.push(typeof cont.preload === "function" ? cont.preload() : void 0);
        }
        return _results;
      }
    };

    Slide.prototype.deactivate = function() {
      Slide.__super__.deactivate.apply(this, arguments);
      return this.el.removeClass('prev next');
    };

    Slide.prototype.onDeck = function() {
      var cont, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        _results.push(typeof cont.preload === "function" ? cont.preload() : void 0);
      }
      return _results;
    };

    Slide.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.append(controller);
    };

    Slide.prototype.clear = function() {
      var cont, _i, _len, _ref;
      _ref = this.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        this.controllers[0].release();
      }
      this.controllers = [];
      return this.html('');
    };

    return Slide;

  })(Spine.Controller);

}).call(this);
