// Generated by CoffeeScript 1.9.3
(function() {
  var Nex, Tab,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require("./panel");

  Nex = this.Nex || require('nex');

  Nex.Widgets.Tabs = (function(superClass) {
    extend(Tabs, superClass);

    Tabs.include(Nex.Panel);

    Tabs.prototype.logPrefix = '(App) Tabs: ';

    Tabs.prototype.className = 'tabs';

    Tabs.prototype.elements = {
      'nav': 'navigation'
    };

    Tabs.prototype.events = {
      'tap nav a': 'onClick'
    };

    function Tabs() {
      Tabs.__super__.constructor.apply(this, arguments);
      this.html("<nav></nav>");
      this.controllers = [];
      this.bind('ready', this.render);
      if (this.path) {
        this.getData(this.path);
      } else {
        this.active(this.getData);
      }
    }

    Tabs.prototype.render = function(result) {
      var asset, col, i, j, k, len, len1, ref;
      for (j = 0, len = result.length; j < len; j++) {
        col = result[j];
        ref = col.items;
        for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
          asset = ref[i];
          this.navigation.append("<a href='#tab" + i + "'>" + (asset.getMeta('title', asset.getMeta('headline'))) + "</a>");
          this.add(new Tab({
            i: i,
            asset: asset
          }));
        }
      }
      this.links = this.$('nav a');
      this.links.eq(0).addClass('active');
      this.content = this.$('article');
      return this.content.eq(0).addClass('active');
    };

    Tabs.prototype.add = function(controller) {
      this.controllers.push(controller);
      return this.append(controller);
    };

    Tabs.prototype.onClick = function(e) {
      var target;
      e.preventDefault();
      this.links.removeClass('active');
      this.content.removeClass('active');
      target = $(e.target);
      target.addClass('active');
      return this.content.filter(target.attr('href')).addClass('active');
    };

    Tabs.prototype.clear = function() {
      var controller, j, len, ref, results;
      ref = this.controllers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        controller = ref[j];
        results.push(controller.release());
      }
      return results;
    };

    Tabs.prototype.deactivate = function() {
      this.clear();
      return Tabs.__super__.deactivate.apply(this, arguments);
    };

    return Tabs;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Tabs;

  Tab = (function(superClass) {
    extend(Tab, superClass);

    Tab.include(Nex.Panel);

    Tab.prototype.logPrefix = '(App) Tab: ';

    Tab.prototype.tag = 'article';

    function Tab() {
      Tab.__super__.constructor.apply(this, arguments);
      this.el.attr('id', "tab" + this.i);
      this.controllers = [];
      if (this.asset.kind === 'Collection') {
        this.bind('ready', this.render);
        this.getData(this.asset.path);
      } else {
        this.render([this.asset]);
      }
    }

    Tab.prototype.render = function(result) {
      var asset, item, j, k, len, len1, ref, results;
      results = [];
      for (j = 0, len = result.length; j < len; j++) {
        asset = result[j];
        this.html(asset.getMeta('text', asset.getMeta('html')));
        this.appendWidget(asset);
        if (asset.kind === 'Collection') {
          ref = asset.items;
          for (k = 0, len1 = ref.length; k < len1; k++) {
            item = ref[k];
            this.appendWidget(item);
          }
        }
        break;
      }
      return results;
    };

    Tab.prototype.appendWidget = function(asset) {
      var el;
      if (!(asset && (el = this.$("." + asset.normname)[0]))) {
        return;
      }
      return this.controllers.push(new Nex.Widgets[asset.kind === 'Collection' ? 'Slider' : asset.kind]({
        el: el,
        src: asset.serving_url,
        align: asset.getMeta('crop', 'center center'),
        resolution: asset.resolution,
        uuid: asset.id,
        formats: asset.formats,
        path: asset.path,
        lazy: false,
        animation: asset.getMeta('animation', ['scalerotate'])[0],
        sizemode: asset.getMeta('sizemode', ['crop'])[0]
      }));
    };

    Tab.prototype.deactivate = function() {
      this.clear();
      return Tab.__super__.deactivate.apply(this, arguments);
    };

    Tab.prototype.clear = function() {
      var cont, j, len, ref;
      ref = this.controllers;
      for (j = 0, len = ref.length; j < len; j++) {
        cont = ref[j];
        cont.release();
      }
      return this.controllers = [];
    };

    return Tab;

  })(Spine.Controller);

}).call(this);
