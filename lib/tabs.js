// Generated by CoffeeScript 1.7.1
(function() {
  var Nex,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("./panel");

  Nex = this.Nex || require('nex');

  Nex.Widgets.Tabs = (function(_super) {
    __extends(Tabs, _super);

    Tabs.include(Nex.Panel);

    Tabs.prototype.logPrefix = '(App) Tabs: ';

    Tabs.prototype.className = 'tabs';

    Tabs.prototype.elements = {
      '.tabNav': 'tabNav',
      '.content': 'content'
    };

    function Tabs() {
      this.appendMedia = __bind(this.appendMedia, this);
      Tabs.__super__.constructor.apply(this, arguments);
      this.tmpl = require('views/tabs');
      this.controllers = new Spine.Manager;
      this.bind('ready', this.render);
      if (this.path) {
        this.getData(this.path);
      } else {
        this.active(this.getData);
      }
    }

    Tabs.prototype.render = function(result) {
      var asset, col, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        col = result[_i];
        this.html(this.tmpl({
          col: col
        }));
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = col.items;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            asset = _ref[_j];
            _results1.push(this.appendMedia(asset));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Tabs.prototype.appendMedia = function(asset) {
      var el, kind, media, _ref;
      if (!(asset && (el = this.$("." + asset.normname)))) {
        return;
      }
      if (asset.kind === 'Collection') {
        kind = 'Slider';
      } else {
        kind = asset.kind;
      }
      return media = new Nex.Widgets[kind]({
        el: el,
        src: asset.serving_url,
        align: ((_ref = asset.meta.crop) != null ? _ref.value : void 0) || 'center center',
        resolution: asset.resolution,
        uuid: asset.id,
        formats: asset.formats,
        path: asset.path,
        lazy: false,
        animation: asset.getMeta('animation', 'scalerotate'),
        sizemode: asset.getMeta('sizemode', ['crop'])[0]
      }, this.add(media));
    };

    Tabs.prototype.add = function(controller) {
      return this.controllers.push(controller);
    };

    Tabs.prototype.clear = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(controller.release());
      }
      return _results;
    };

    Tabs.prototype.deactivate = function() {
      this.clear();
      return Tabs.__super__.deactivate.apply(this, arguments);
    };

    return Tabs;

  })(Spine.Controller);

}).call(this);
