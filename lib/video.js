// Generated by CoffeeScript 1.7.1
(function() {
  var Controls, Nex, VideoElement,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nex = this.Nex || require('nex');

  Nex.Widgets.Video = (function(_super) {
    __extends(Video, _super);

    Video.prototype.className = 'imagovideo';

    Video.prototype.logPrefix = '(App) Video: ';

    Video.prototype.defaults = {
      autobuffer: null,
      autoplay: false,
      controls: true,
      size: 'hd',
      align: 'left top',
      sizemode: 'fit',
      width: '',
      height: '',
      lazy: true
    };

    Video.prototype.events = {
      'mousemove': 'activateControls',
      'keydown': 'activateControls',
      'DOMMouseScroll': 'activateControls',
      'mousewheel': 'activateControls',
      'mousedown': 'activateControls',
      'tap .playbig': 'togglePlay'
    };

    Video.prototype.elements = {
      '.imagowrapper': 'wrapper',
      'video': 'videoEl'
    };

    function Video() {
      this.togglePlay = __bind(this.togglePlay, this);
      this.stop = __bind(this.stop, this);
      this.pause = __bind(this.pause, this);
      this.activateControls = __bind(this.activateControls, this);
      this.setupPosterFrame = __bind(this.setupPosterFrame, this);
      this.resize = __bind(this.resize, this);
      var key, r, value, _ref;
      _ref = this.defaults;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      Video.__super__.constructor.apply(this, arguments);
      this.id || (this.id = Nex.Utils.uuid());
      if (this.data) {
        this.el.data(this.data);
      }
      if (typeof this.resolution === 'string') {
        r = this.resolution.split('x');
        this.resolution = {
          width: r[0],
          height: r[1]
        };
        this.assetRatio = r[0] / r[1];
      }
      this.html("<div class=\"imagowrapper\">\n  <a class=\"playbig fa fa-play\" />\n  <video></video>\n</div>");
      this.video = new VideoElement({
        el: this.videoEl,
        player: this
      });
      this.el.addClass("" + (this["class"] || '') + " " + this.size + " " + this.align + " " + this.sizemode);
      if (this.controls) {
        this.on('videoready', function() {
          this.controlBar = new Controls({
            player: this
          });
          return this.wrapper.append(this.controlBar.el);
        });
      }
      this.window = $(window);
      this.window.on("resize." + this.id, this.resize);
      if (this.lazy) {
        this.window.on("scrollstop." + this.id, this.setupPosterFrame);
      }
      this.preload();
    }

    Video.prototype.preload = function() {
      return this.delay(function() {
        this.setupPosterFrame();
        return this.resize();
      }, 0);
    };

    Video.prototype.resize = function() {
      var height, s, width, wrapperRatio;
      if (this.sizemode === 'crop') {
        width = this.el.width();
        height = this.el.height();
        wrapperRatio = width / height;
        if (this.assetRatio < wrapperRatio) {
          if (Nex.Utils.isiOS()) {
            s = {
              width: '100%',
              height: '100%'
            };
            if (this.align === 'center center') {
              s.top = '0';
              s.left = '0';
            }
          } else {
            s = {
              width: '100%',
              height: 'auto'
            };
            if (this.align === 'center center') {
              s.top = '50%';
              s.left = 'auto';
              s.marginTop = "-" + (parseInt(width / this.assetRatio / 2)) + "px";
              s.marginLeft = "0px";
            }
          }
          this.video.el.css(s);
          return this.wrapper.css({
            backgroundSize: '100% auto',
            backgroundPosition: this.align
          });
        } else {
          if (Nex.Utils.isiOS()) {
            s = {
              width: '100%',
              height: '100%'
            };
            if (this.align === 'center center') {
              s.top = '0';
              s.left = '0';
            }
          } else {
            s = {
              width: 'auto',
              height: '100%'
            };
            if (this.align === 'center center') {
              s.top = 'auto';
              s.left = '50%';
              s.marginTop = "0px";
              s.marginLeft = "-" + (parseInt(height * this.assetRatio / 2)) + "px";
            }
          }
          this.video.el.css(s);
          return this.wrapper.css({
            backgroundSize: 'auto 100%',
            backgroundPosition: this.align
          });
        }
      } else {
        width = this.el.width();
        height = this.el.height();
        wrapperRatio = width / height;
        if (this.assetRatio > wrapperRatio) {
          this.video.el.css({
            width: '100%',
            height: Nex.Utils.isiOS() ? '100%' : 'auto'
          });
          return this.wrapper.css({
            backgroundSize: '100% auto',
            backgroundPosition: this.align,
            width: "" + width + "px",
            height: "" + (parseInt(width / this.assetRatio, 10)) + "px"
          });
        } else {
          this.video.el.css({
            width: Nex.Utils.isiOS() ? '100%' : 'auto',
            height: '100%'
          });
          return this.wrapper.css({
            backgroundSize: 'auto 100%',
            backgroundPosition: this.align,
            width: "" + (parseInt(height * this.assetRatio, 10)) + "px",
            height: "" + height + "px"
          });
        }
      }
    };

    Video.prototype.setupPosterFrame = function() {
      var css, dpr, height, width;
      if (!($.inviewport(this.el, {
        threshold: 0
      })) && this.lazy) {
        return;
      }
      if (!this.src) {
        return;
      }
      dpr = this.hires ? Math.ceil(window.devicePixelRatio) || 1 : 1;
      width = this.el.width();
      height = this.el.height();
      this.serving_url = this.src;
      this.serving_url += "=s" + (Math.ceil(Math.min(Math.max(width, height) * dpr, 1600)));
      css = {
        backgroundImage: "url(" + this.serving_url + ")",
        backgroundPosition: this.align,
        backgroundRepeat: 'no-repeat'
      };
      css.backgroundSize = "auto 100%";
      return this.wrapper.css(css);
    };

    Video.prototype.activateControls = function() {
      if (!this.controlBar) {
        return;
      }
      return this.controlBar.activate();
    };

    Video.prototype.play = function() {
      return this.delay(this.video.play, 500);
    };

    Video.prototype.pause = function() {
      return this.video.pause();
    };

    Video.prototype.stop = function() {
      return this.pause();
    };

    Video.prototype.togglePlay = function() {
      return this.video.togglePlay();
    };

    return Video;

  })(Spine.Controller);

  module.exports = Nex.Widgets.Video;

  VideoElement = (function(_super) {
    __extends(VideoElement, _super);

    VideoElement.prototype.tag = 'video';

    VideoElement.prototype.events = {
      'click': 'click',
      'dblclick': 'dblclick',
      'error': 'onerror',
      'loadstart': 'onloadstart',
      'loadeddata': 'onloadeddata',
      'progress': 'onprogress',
      'canplay': 'oncanplay',
      'durationchange': 'ondurationchange',
      'timeupdate': 'ontimeupdate',
      'pause': 'onpause',
      'play': 'onplay',
      'ended': 'onended',
      'volumechange': 'onvolumechange',
      'swipe': 'onSwipe'
    };

    function VideoElement() {
      this.onended = __bind(this.onended, this);
      this.onplay = __bind(this.onplay, this);
      this.onpause = __bind(this.onpause, this);
      this.ondurationchange = __bind(this.ondurationchange, this);
      this.oncanplay = __bind(this.oncanplay, this);
      this.onloadstart = __bind(this.onloadstart, this);
      this.onloadeddata = __bind(this.onloadeddata, this);
      this.onprogress = __bind(this.onprogress, this);
      this.onerror = __bind(this.onerror, this);
      this.dblclick = __bind(this.dblclick, this);
      this.click = __bind(this.click, this);
      this.play = __bind(this.play, this);
      this.onSwipe = __bind(this.onSwipe, this);
      VideoElement.__super__.constructor.apply(this, arguments);
      this.logPrefix = '(App) VideoElement: ';
      this.codecs = ['mp4', 'webm'];
      this.video = this.el[0];
      this.el.prop('autoplay', this.player.autoplay);
      this.el.attr({
        preload: 'none',
        autobuffer: this.player.autobuffer,
        'x-webkit-airplay': 'allow',
        webkitAllowFullscreen: 'true'
      });
      if (Nex.Utils.isiOS()) {
        this.el.css({
          display: 'none'
        });
      }
      this.loadSources();
    }

    VideoElement.prototype.onSwipe = function(e) {
      return this.log('onSwipe');
    };

    VideoElement.prototype.loadSources = function() {
      var codec, format, i, src, srcEl, _i, _len, _ref, _results;
      if (!this.player.uuid) {
        return;
      }
      codec = this.detectCodec();
      this.player.formats.sort(function(a, b) {
        return b.height - a.height;
      });
      _ref = this.player.formats;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        format = _ref[i];
        if (codec !== format.codec) {
          continue;
        }
        src = "//" + Nex.tenant + ".imagoapp.com/assets/api/play_redirect?uuid=" + this.player.uuid + "&codec=" + format.codec + "&quality=hd&max_size=" + format.size;
        srcEl = $('<source />', {
          src: src,
          'data-size': format.size,
          'data-codec': format.codec,
          type: "video/" + codec
        });
        _results.push(this.el.append(srcEl));
      }
      return _results;
    };

    VideoElement.prototype.detectCodec = function() {
      var codecs, key, value;
      if (!this.el[0].canPlayType) {
        return;
      }
      codecs = {
        mp4: 'video/mp4; codecs="mp4v.20.8"',
        mp4: 'video/mp4; codecs="avc1.42E01E"',
        mp4: 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
        webm: 'video/webm; codecs="vp8, vorbis"',
        ogg: 'video/ogg; codecs="theora"'
      };
      for (key in codecs) {
        value = codecs[key];
        if (this.el[0].canPlayType(value)) {
          return key;
        }
      }
    };

    VideoElement.prototype.setSize = function(size) {
      var poster, srcs, time;
      time = this.getCurrentTime();
      srcs = this.el.children('source');
      if (!(srcs.length > 1)) {
        return;
      }
      poster = this.player.el.css('backgroundImage');
      this.player.el.css('backgroundImage', '');
      this.el.one('loadeddata', (function(_this) {
        return function() {
          _this.seek(time);
          _this.el.css('display', 'block');
          _this.player.el.css('backgroundImage', poster);
          return _this.play();
        };
      })(this));
      this.pause();
      this.el.css('display', 'none');
      this.el.attr('src', srcs[(size === "hd" ? 0 : srcs.length - 1)].src);
      return this.video.load();
    };

    VideoElement.prototype.play = function() {
      return this.video.play();
    };

    VideoElement.prototype.pause = function() {
      return this.video.pause();
    };

    VideoElement.prototype.seek = function(offset) {
      var state;
      state = this.state;
      this.pause();
      this.setCurrentTime(offset);
      if (state === 'playing') {
        return this.play();
      }
    };

    VideoElement.prototype.setCurrentTime = function(offset) {
      return this.video.currentTime(offset);
    };

    VideoElement.prototype.togglePlay = function() {
      if (this.state === 'playing') {
        if (Nex.Utils.isiOS()) {
          this.el.css({
            display: 'none'
          });
        }
        return this.pause();
      } else {
        if (Nex.Utils.isiOS()) {
          this.el.css({
            display: 'block'
          });
        }
        return this.play();
      }
    };

    VideoElement.prototype.getDuration = function() {
      return this.video.duration;
    };

    VideoElement.prototype.getStartTime = function() {
      return this.video.startTime || 0;
    };

    VideoElement.prototype.getEndTime = function() {
      if (this.video.duration === Infinity && this.video.buffered) {
        return this.video.buffered.end(this.video.buffered.length - 1);
      } else {
        return (this.video.startTime || 0) + this.video.duration;
      }
    };

    VideoElement.prototype.getCurrentTime = function() {
      var e;
      try {
        return this.video.currentTime;
      } catch (_error) {
        e = _error;
        return 0;
      }
    };

    VideoElement.prototype.setCurrentTime = function(val) {
      return this.video.currentTime = val;
    };

    VideoElement.prototype.getVolume = function() {
      return this.video.volume;
    };

    VideoElement.prototype.setVolume = function(val) {
      return this.video.volume = val;
    };

    VideoElement.prototype.enterFullScreen = function(e) {
      return this.video.webkitEnterFullScreen();
    };

    VideoElement.prototype.exitFullScreen = function() {};

    VideoElement.prototype.click = function() {
      return this.togglePlay();
    };

    VideoElement.prototype.dblclick = function() {};

    VideoElement.prototype.onerror = function(e) {
      return this.log('onerror', e);
    };

    VideoElement.prototype.onprogress = function() {
      return this.player.el.addClass('loading');
    };

    VideoElement.prototype.onloadeddata = function() {
      this.player.el.removeClass('loading');
      return this.player.trigger('videoready');
    };

    VideoElement.prototype.onloadstart = function() {};

    VideoElement.prototype.oncanplay = function() {
      return this.player.el.removeClass('loading');
    };

    VideoElement.prototype.ondurationchange = function() {};

    VideoElement.prototype.ontimeupdate = function(e) {
      return this.trigger('timeupdate', e);
    };

    VideoElement.prototype.onpause = function() {
      this.state = 'paused';
      this.player.el.removeClass('playing');
      if (Nex.Utils.isiOS()) {
        return this.el.css({
          display: 'none'
        });
      }
    };

    VideoElement.prototype.onplay = function() {
      this.state = 'playing';
      this.player.el.addClass('playing');
      return this.player.el.removeClass('loading');
    };

    VideoElement.prototype.onended = function() {
      if (Nex.Utils.isiOS()) {
        this.el.css({
          display: 'none'
        });
      }
      this.player.trigger('end');
      return this.state = 'stopped';
    };

    VideoElement.prototype.onvolumechange = function(e) {
      return this.trigger('volumechange', e);
    };

    return VideoElement;

  })(Spine.Controller);

  Controls = (function(_super) {
    __extends(Controls, _super);

    Controls.prototype.className = 'controls active';

    Controls.prototype.elements = {
      '.time': 'time',
      '.seek': 'seek',
      '.volume input': 'volume'
    };

    Controls.prototype.events = {
      'click  .play': 'play',
      'click  .pause': 'pause',
      'click  .size': 'toggleSize',
      'click  .fullscreen': 'onEnterFullScreen',
      'change .seek': 'onSeek',
      'change .volume input': 'onVolumeChnage',
      'click  .fa-volume-down': 'muteVolume',
      'click  .fa-volume-up': 'fullVolume',
      'input .seek': 'onInput'
    };

    function Controls() {
      this.doDelayed = __bind(this.doDelayed, this);
      this.onfullscreenchange = __bind(this.onfullscreenchange, this);
      this.onEnterFullScreen = __bind(this.onEnterFullScreen, this);
      this.onVolumeChnage = __bind(this.onVolumeChnage, this);
      this.toggleSize = __bind(this.toggleSize, this);
      this.onSeek = __bind(this.onSeek, this);
      this.onvolumeupdate = __bind(this.onvolumeupdate, this);
      this.ontimeupdate = __bind(this.ontimeupdate, this);
      this.onInput = __bind(this.onInput, this);
      Controls.__super__.constructor.apply(this, arguments);
      this.logPrefix = '(App) Controls: ';
      this.html("<a class=\"play fa fa-play\"></a>\n<a class=\"pause fa fa-pause\"></a>\n<span class=\"time\">00:00</span>\n<span class=\"seekbar\">\n  <input type=\"range\" value=\"0\" class=\"seek\"/>\n</span>\n<a class=\"size\">hd</a>\n<span class=\"volume\">\n  <span class=\"fa fa-volume-up\"></span>\n  <input type=\"range\" value=\"100\"/>\n  <span class=\"fa fa-volume-down\"></span>\n</span>\n<a class=\"fullscreen fa fa-expand\"></a>\n<a class=\"screen fa fa-compress></a>");
      this.player.video.on('timeupdate', this.ontimeupdate);
      this.player.video.on('volumechange', this.onvolumeupdate);
      document.addEventListener(screenfull.raw.fullscreenchange, this.onfullscreenchange);
      this.activate();
    }

    Controls.prototype.onInput = function(e) {
      return this.seeking = true;
    };

    Controls.prototype.play = function(e) {
      return this.player.video.play();
    };

    Controls.prototype.pause = function(e) {
      return this.player.video.pause();
    };

    Controls.prototype.ontimeupdate = function(e) {
      if (this.seeking) {
        return;
      }
      this.time.html(this.formatTime(this.player.video.getCurrentTime()));
      return this.seek.val(this.player.video.getCurrentTime() / this.player.video.getEndTime() * 100);
    };

    Controls.prototype.onvolumeupdate = function(e) {
      var volume;
      volume = this.player.video.getVolume() * 100;
      if (Number(this.volume.val()) !== volume) {
        return this.volume.val(volume);
      }
    };

    Controls.prototype.pad = function(num) {
      if (num < 10) {
        return "0" + num;
      }
      return num;
    };

    Controls.prototype.formatTime = function(sec) {
      var hours, minutes, result, seconds;
      result = [];
      minutes = Math.floor(sec / 60);
      hours = Math.floor(sec / 3600);
      seconds = (sec === 0 ? 0 : sec % 60);
      seconds = Math.round(seconds);
      if (hours > 0) {
        result.push(this.pad(hours));
      }
      result.push(this.pad(minutes));
      result.push(this.pad(seconds));
      return result.join(":");
    };

    Controls.prototype.onSeek = function(e) {
      var value;
      value = this.player.video.getEndTime() / 100 * $(e.target).val();
      this.player.video.seek(value);
      return this.seeking = false;
    };

    Controls.prototype.toggleSize = function(e) {
      var size;
      if (this.player.size === 'hd') {
        size = 'sd';
      } else {
        size = 'hd';
      }
      this.player.el.addClass(size).removeClass(this.player.size);
      this.player.size = size;
      return this.player.video.setSize(size);
    };

    Controls.prototype.onVolumeChnage = function(e) {
      var value;
      value = $(e.target).val() / 100;
      return this.player.video.setVolume(value);
    };

    Controls.prototype.onEnterFullScreen = function(e) {
      if (!screenfull.enabled) {
        return;
      }
      screenfull.request(this.player.video.el[0]);
      return this.player.video.el[0].setAttribute('controls', 'controls');
    };

    Controls.prototype.onfullscreenchange = function(e) {
      if (!screenfull.isFullscreen) {
        return this.player.video.el[0].removeAttribute('controls');
      }
    };

    Controls.prototype.muteVolume = function() {
      return this.player.video.setVolume(0);
    };

    Controls.prototype.fullVolume = function() {
      return this.player.video.setVolume(1);
    };

    Controls.prototype.doDelayed = function(func, sec) {
      if (this.idleTimer) {
        clearTimeout(this.idleTimer);
      }
      return this.idleTimer = this.delay(func, sec || 2000);
    };

    Controls.prototype.activate = function(e) {
      this.doDelayed(this.deactivate);
      return this.el.addClass('active');
    };

    Controls.prototype.deactivate = function() {
      return this.el.removeClass('active');
    };

    return Controls;

  })(Spine.Controller);

}).call(this);
